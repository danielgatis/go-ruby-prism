/*----------------------------------------------------------------------------*/
/* This file is generated by the templates/template.rb script and should not  */
/* be modified manually. See                                                  */
/* templates/../../templates/gen_node_loader.go.erb                           */
/* if you are looking to modify the                                           */
/* template                                                                   */
/*----------------------------------------------------------------------------*/

package parser

import (
	"fmt"
)

func loadNode(buff *SeekableBuffer, source []byte, constantPool *ConstantPool) (Node, error) {
	nodeType, err := buff.ReadByte()
	if err != nil {
		return nil, fmt.Errorf("failed to read node type: %w", err)
	}

	startOffset, err := loadVarUInt(buff)
	if err != nil {
		return nil, fmt.Errorf("failed to read start offset: %w", err)
	}

	length, err := loadVarUInt(buff)
	if err != nil {
		return nil, fmt.Errorf("failed to read length: %w", err)
	}

	switch nodeType {
	case 1:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewAliasGlobalVariableNode(startOffset, length, node1, node2), nil
	case 2:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewAliasMethodNode(startOffset, length, node1, node2), nil
	case 3:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewAlternationPatternNode(startOffset, length, node1, node2), nil
	case 4:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewAndNode(startOffset, length, node1, node2), nil
	case 5:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewArgumentsNode(startOffset, length, flags, nodes1), nil
	case 6:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewArrayNode(startOffset, length, flags, nodes1), nil
	case 7:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		nodes2, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		nodes4, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes4: %w", err)
		}

		return NewArrayPatternNode(startOffset, length, optionalNode1, nodes2, optionalNode3, nodes4), nil
	case 8:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewAssocNode(startOffset, length, node1, node2), nil
	case 9:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		return NewAssocSplatNode(startOffset, length, optionalNode1), nil
	case 10:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewBackReferenceReadNode(startOffset, length, constant1), nil
	case 11:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *StatementsNode")
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*RescueNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *RescueNode")
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*ElseNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *ElseNode")
		}

		optionalNode4, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode4: %w", err)
		}

		castedOptionalNode4, ok := optionalNode4.(*EnsureNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode4 to *EnsureNode")
		}

		return NewBeginNode(startOffset, length, castedOptionalNode1, castedOptionalNode2, castedOptionalNode3, castedOptionalNode4), nil
	case 12:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		return NewBlockArgumentNode(startOffset, length, optionalNode1), nil
	case 13:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewBlockLocalVariableNode(startOffset, length, flags, constant1), nil
	case 14:

		constants1, err := loadConstants(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constants1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		return NewBlockNode(startOffset, length, constants1, optionalNode2, optionalNode3), nil
	case 15:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		optionalConstant1, err := loadOptionalConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalConstant1: %w", err)
		}

		return NewBlockParameterNode(startOffset, length, flags, optionalConstant1), nil
	case 16:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*ParametersNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *ParametersNode")
		}

		nodes2, err := loadBlockLocalVariableNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes2: %w", err)
		}

		return NewBlockParametersNode(startOffset, length, castedOptionalNode1, nodes2), nil
	case 17:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*ArgumentsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *ArgumentsNode")
		}

		return NewBreakNode(startOffset, length, castedOptionalNode1), nil
	case 18:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		constant2, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant2: %w", err)
		}

		constant3, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant3: %w", err)
		}

		node4, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node4: %w", err)
		}

		return NewCallAndWriteNode(startOffset, length, flags, optionalNode1, constant2, constant3, node4), nil
	case 19:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		constant2, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*ArgumentsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *ArgumentsNode")
		}

		optionalNode4, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode4: %w", err)
		}

		return NewCallNode(startOffset, length, flags, optionalNode1, constant2, castedOptionalNode3, optionalNode4), nil
	case 20:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		constant2, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant2: %w", err)
		}

		constant3, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant3: %w", err)
		}

		constant4, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant4: %w", err)
		}

		node5, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node5: %w", err)
		}

		return NewCallOperatorWriteNode(startOffset, length, flags, optionalNode1, constant2, constant3, constant4, node5), nil
	case 21:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		constant2, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant2: %w", err)
		}

		constant3, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant3: %w", err)
		}

		node4, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node4: %w", err)
		}

		return NewCallOrWriteNode(startOffset, length, flags, optionalNode1, constant2, constant3, node4), nil
	case 22:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		constant2, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant2: %w", err)
		}

		return NewCallTargetNode(startOffset, length, flags, node1, constant2), nil
	case 23:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		castedNode2, ok := node2.(*LocalVariableTargetNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode2 to *LocalVariableTargetNode")
		}

		return NewCapturePatternNode(startOffset, length, node1, castedNode2), nil
	case 24:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		nodes2, err := loadInNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*ElseNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *ElseNode")
		}

		return NewCaseMatchNode(startOffset, length, optionalNode1, nodes2, castedOptionalNode3), nil
	case 25:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		nodes2, err := loadWhenNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*ElseNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *ElseNode")
		}

		return NewCaseNode(startOffset, length, optionalNode1, nodes2, castedOptionalNode3), nil
	case 26:

		constants1, err := loadConstants(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constants1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		optionalNode4, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode4: %w", err)
		}

		constant5, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant5: %w", err)
		}

		return NewClassNode(startOffset, length, constants1, node2, optionalNode3, optionalNode4, constant5), nil
	case 27:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewClassVariableAndWriteNode(startOffset, length, constant1, node2), nil
	case 28:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		constant3, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant3: %w", err)
		}

		return NewClassVariableOperatorWriteNode(startOffset, length, constant1, node2, constant3), nil
	case 29:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewClassVariableOrWriteNode(startOffset, length, constant1, node2), nil
	case 30:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewClassVariableReadNode(startOffset, length, constant1), nil
	case 31:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewClassVariableTargetNode(startOffset, length, constant1), nil
	case 32:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewClassVariableWriteNode(startOffset, length, constant1, node2), nil
	case 33:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewConstantAndWriteNode(startOffset, length, constant1, node2), nil
	case 34:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		constant3, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant3: %w", err)
		}

		return NewConstantOperatorWriteNode(startOffset, length, constant1, node2, constant3), nil
	case 35:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewConstantOrWriteNode(startOffset, length, constant1, node2), nil
	case 36:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		castedNode1, ok := node1.(*ConstantPathNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode1 to *ConstantPathNode")
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewConstantPathAndWriteNode(startOffset, length, castedNode1, node2), nil
	case 37:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		optionalConstant2, err := loadOptionalConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalConstant2: %w", err)
		}

		return NewConstantPathNode(startOffset, length, optionalNode1, optionalConstant2), nil
	case 38:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		castedNode1, ok := node1.(*ConstantPathNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode1 to *ConstantPathNode")
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		constant3, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant3: %w", err)
		}

		return NewConstantPathOperatorWriteNode(startOffset, length, castedNode1, node2, constant3), nil
	case 39:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		castedNode1, ok := node1.(*ConstantPathNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode1 to *ConstantPathNode")
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewConstantPathOrWriteNode(startOffset, length, castedNode1, node2), nil
	case 40:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		optionalConstant2, err := loadOptionalConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalConstant2: %w", err)
		}

		return NewConstantPathTargetNode(startOffset, length, optionalNode1, optionalConstant2), nil
	case 41:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		castedNode1, ok := node1.(*ConstantPathNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode1 to *ConstantPathNode")
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewConstantPathWriteNode(startOffset, length, castedNode1, node2), nil
	case 42:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewConstantReadNode(startOffset, length, constant1), nil
	case 43:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewConstantTargetNode(startOffset, length, constant1), nil
	case 44:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewConstantWriteNode(startOffset, length, constant1, node2), nil
	case 45:
		serializedLength, err := loadInt(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read serialized length: %w", err)
		}

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*ParametersNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *ParametersNode")
		}

		optionalNode4, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode4: %w", err)
		}

		constants5, err := loadConstants(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constants5: %w", err)
		}

		return NewDefNode(startOffset, length, serializedLength, constant1, optionalNode2, castedOptionalNode3, optionalNode4, constants5), nil
	case 46:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		return NewDefinedNode(startOffset, length, node1), nil
	case 47:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *StatementsNode")
		}

		return NewElseNode(startOffset, length, castedOptionalNode1), nil
	case 48:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *StatementsNode")
		}

		return NewEmbeddedStatementsNode(startOffset, length, castedOptionalNode1), nil
	case 49:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		return NewEmbeddedVariableNode(startOffset, length, node1), nil
	case 50:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *StatementsNode")
		}

		return NewEnsureNode(startOffset, length, castedOptionalNode1), nil
	case 51:
		return NewFalseNode(startOffset, length), nil
	case 52:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		castedNode2, ok := node2.(*SplatNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode2 to *SplatNode")
		}

		nodes3, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes3: %w", err)
		}

		node4, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node4: %w", err)
		}

		return NewFindPatternNode(startOffset, length, optionalNode1, castedNode2, nodes3, node4), nil
	case 53:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		return NewFlipFlopNode(startOffset, length, flags, optionalNode1, optionalNode2), nil
	case 54:

		doubleField1, err := loadDouble(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load doubleField1: %w", err)
		}

		return NewFloatNode(startOffset, length, doubleField1), nil
	case 55:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *StatementsNode")
		}

		return NewForNode(startOffset, length, node1, node2, castedOptionalNode3), nil
	case 56:
		return NewForwardingArgumentsNode(startOffset, length), nil
	case 57:
		return NewForwardingParameterNode(startOffset, length), nil
	case 58:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*BlockNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *BlockNode")
		}

		return NewForwardingSuperNode(startOffset, length, castedOptionalNode1), nil
	case 59:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewGlobalVariableAndWriteNode(startOffset, length, constant1, node2), nil
	case 60:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		constant3, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant3: %w", err)
		}

		return NewGlobalVariableOperatorWriteNode(startOffset, length, constant1, node2, constant3), nil
	case 61:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewGlobalVariableOrWriteNode(startOffset, length, constant1, node2), nil
	case 62:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewGlobalVariableReadNode(startOffset, length, constant1), nil
	case 63:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewGlobalVariableTargetNode(startOffset, length, constant1), nil
	case 64:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewGlobalVariableWriteNode(startOffset, length, constant1, node2), nil
	case 65:

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewHashNode(startOffset, length, nodes1), nil
	case 66:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		nodes2, err := loadAssocNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		return NewHashPatternNode(startOffset, length, optionalNode1, nodes2, optionalNode3), nil
	case 67:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *StatementsNode")
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		return NewIfNode(startOffset, length, node1, castedOptionalNode2, optionalNode3), nil
	case 68:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		return NewImaginaryNode(startOffset, length, node1), nil
	case 69:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		return NewImplicitNode(startOffset, length, node1), nil
	case 70:
		return NewImplicitRestNode(startOffset, length), nil
	case 71:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *StatementsNode")
		}

		return NewInNode(startOffset, length, node1, castedOptionalNode2), nil
	case 72:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*ArgumentsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *ArgumentsNode")
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*BlockArgumentNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *BlockArgumentNode")
		}

		node4, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node4: %w", err)
		}

		return NewIndexAndWriteNode(startOffset, length, flags, optionalNode1, castedOptionalNode2, castedOptionalNode3, node4), nil
	case 73:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*ArgumentsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *ArgumentsNode")
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*BlockArgumentNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *BlockArgumentNode")
		}

		constant4, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant4: %w", err)
		}

		node5, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node5: %w", err)
		}

		return NewIndexOperatorWriteNode(startOffset, length, flags, optionalNode1, castedOptionalNode2, castedOptionalNode3, constant4, node5), nil
	case 74:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*ArgumentsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *ArgumentsNode")
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*BlockArgumentNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *BlockArgumentNode")
		}

		node4, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node4: %w", err)
		}

		return NewIndexOrWriteNode(startOffset, length, flags, optionalNode1, castedOptionalNode2, castedOptionalNode3, node4), nil
	case 75:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*ArgumentsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *ArgumentsNode")
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*BlockArgumentNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *BlockArgumentNode")
		}

		return NewIndexTargetNode(startOffset, length, flags, node1, castedOptionalNode2, castedOptionalNode3), nil
	case 76:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewInstanceVariableAndWriteNode(startOffset, length, constant1, node2), nil
	case 77:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		constant3, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant3: %w", err)
		}

		return NewInstanceVariableOperatorWriteNode(startOffset, length, constant1, node2, constant3), nil
	case 78:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewInstanceVariableOrWriteNode(startOffset, length, constant1, node2), nil
	case 79:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewInstanceVariableReadNode(startOffset, length, constant1), nil
	case 80:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewInstanceVariableTargetNode(startOffset, length, constant1), nil
	case 81:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewInstanceVariableWriteNode(startOffset, length, constant1, node2), nil
	case 82:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		intField1, err := loadInteger(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load intField1: %w", err)
		}

		return NewIntegerNode(startOffset, length, flags, intField1), nil
	case 83:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewInterpolatedMatchLastLineNode(startOffset, length, flags, nodes1), nil
	case 84:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewInterpolatedRegularExpressionNode(startOffset, length, flags, nodes1), nil
	case 85:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewInterpolatedStringNode(startOffset, length, flags, nodes1), nil
	case 86:

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewInterpolatedSymbolNode(startOffset, length, nodes1), nil
	case 87:

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewInterpolatedXStringNode(startOffset, length, nodes1), nil
	case 88:
		return NewItLocalVariableReadNode(startOffset, length), nil
	case 89:
		return NewItParametersNode(startOffset, length), nil
	case 90:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewKeywordHashNode(startOffset, length, flags, nodes1), nil
	case 91:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		optionalConstant1, err := loadOptionalConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalConstant1: %w", err)
		}

		return NewKeywordRestParameterNode(startOffset, length, flags, optionalConstant1), nil
	case 92:

		constants1, err := loadConstants(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constants1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		return NewLambdaNode(startOffset, length, constants1, optionalNode2, optionalNode3), nil
	case 93:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		constant2, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant2: %w", err)
		}

		uint32field3, err := loadVarUInt(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load uint32field3: %w", err)
		}

		return NewLocalVariableAndWriteNode(startOffset, length, node1, constant2, uint32(uint32field3)), nil
	case 94:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		constant2, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant2: %w", err)
		}

		constant3, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant3: %w", err)
		}

		uint32field4, err := loadVarUInt(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load uint32field4: %w", err)
		}

		return NewLocalVariableOperatorWriteNode(startOffset, length, node1, constant2, constant3, uint32(uint32field4)), nil
	case 95:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		constant2, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant2: %w", err)
		}

		uint32field3, err := loadVarUInt(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load uint32field3: %w", err)
		}

		return NewLocalVariableOrWriteNode(startOffset, length, node1, constant2, uint32(uint32field3)), nil
	case 96:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		uint32field2, err := loadVarUInt(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load uint32field2: %w", err)
		}

		return NewLocalVariableReadNode(startOffset, length, constant1, uint32(uint32field2)), nil
	case 97:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		uint32field2, err := loadVarUInt(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load uint32field2: %w", err)
		}

		return NewLocalVariableTargetNode(startOffset, length, constant1, uint32(uint32field2)), nil
	case 98:

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		uint32field2, err := loadVarUInt(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load uint32field2: %w", err)
		}

		node3, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node3: %w", err)
		}

		return NewLocalVariableWriteNode(startOffset, length, constant1, uint32(uint32field2), node3), nil
	case 99:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		str1, err := loadString(buff, source)
		if err != nil {
			return nil, fmt.Errorf("failed to load str1: %w", err)
		}

		return NewMatchLastLineNode(startOffset, length, flags, str1), nil
	case 100:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewMatchPredicateNode(startOffset, length, node1, node2), nil
	case 101:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewMatchRequiredNode(startOffset, length, node1, node2), nil
	case 102:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		castedNode1, ok := node1.(*CallNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode1 to *CallNode")
		}

		nodes2, err := loadLocalVariableTargetNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes2: %w", err)
		}

		return NewMatchWriteNode(startOffset, length, castedNode1, nodes2), nil
	case 103:
		return NewMissingNode(startOffset, length), nil
	case 104:

		constants1, err := loadConstants(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constants1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		constant4, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant4: %w", err)
		}

		return NewModuleNode(startOffset, length, constants1, node2, optionalNode3, constant4), nil
	case 105:

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		nodes3, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes3: %w", err)
		}

		return NewMultiTargetNode(startOffset, length, nodes1, optionalNode2, nodes3), nil
	case 106:

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		nodes3, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes3: %w", err)
		}

		node4, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node4: %w", err)
		}

		return NewMultiWriteNode(startOffset, length, nodes1, optionalNode2, nodes3, node4), nil
	case 107:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*ArgumentsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *ArgumentsNode")
		}

		return NewNextNode(startOffset, length, castedOptionalNode1), nil
	case 108:
		return NewNilNode(startOffset, length), nil
	case 109:
		return NewNoKeywordsParameterNode(startOffset, length), nil
	case 110:

		uint8field1, err := buff.ReadByte()
		if err != nil {
			return nil, fmt.Errorf("failed to load uint8field1: %w", err)
		}

		return NewNumberedParametersNode(startOffset, length, uint8field1), nil
	case 111:

		uint32field1, err := loadVarUInt(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load uint32field1: %w", err)
		}

		return NewNumberedReferenceReadNode(startOffset, length, uint32(uint32field1)), nil
	case 112:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewOptionalKeywordParameterNode(startOffset, length, flags, constant1, node2), nil
	case 113:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewOptionalParameterNode(startOffset, length, flags, constant1, node2), nil
	case 114:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewOrNode(startOffset, length, node1, node2), nil
	case 115:

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		nodes2, err := loadOptionalParameterNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		nodes4, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes4: %w", err)
		}

		nodes5, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes5: %w", err)
		}

		optionalNode6, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode6: %w", err)
		}

		optionalNode7, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode7: %w", err)
		}

		castedOptionalNode7, ok := optionalNode7.(*BlockParameterNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode7 to *BlockParameterNode")
		}

		return NewParametersNode(startOffset, length, nodes1, nodes2, optionalNode3, nodes4, nodes5, optionalNode6, castedOptionalNode7), nil
	case 116:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		return NewParenthesesNode(startOffset, length, optionalNode1), nil
	case 117:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		return NewPinnedExpressionNode(startOffset, length, node1), nil
	case 118:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		return NewPinnedVariableNode(startOffset, length, node1), nil
	case 119:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *StatementsNode")
		}

		return NewPostExecutionNode(startOffset, length, castedOptionalNode1), nil
	case 120:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *StatementsNode")
		}

		return NewPreExecutionNode(startOffset, length, castedOptionalNode1), nil
	case 121:
		constants1, err := loadConstants(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constants1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		castedNode2, ok := node2.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode2 to *StatementsNode")
		}

		return NewProgramNode(startOffset, length, constants1, castedNode2), nil
	case 122:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		return NewRangeNode(startOffset, length, flags, optionalNode1, optionalNode2), nil
	case 123:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		intField1, err := loadInteger(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load intField1: %w", err)
		}

		intField2, err := loadInteger(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to load intField2: %w", err)
		}

		return NewRationalNode(startOffset, length, flags, intField1, intField2), nil
	case 124:
		return NewRedoNode(startOffset, length), nil
	case 125:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		str1, err := loadString(buff, source)
		if err != nil {
			return nil, fmt.Errorf("failed to load str1: %w", err)
		}

		return NewRegularExpressionNode(startOffset, length, flags, str1), nil
	case 126:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewRequiredKeywordParameterNode(startOffset, length, flags, constant1), nil
	case 127:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		constant1, err := loadConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constant1: %w", err)
		}

		return NewRequiredParameterNode(startOffset, length, flags, constant1), nil
	case 128:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		return NewRescueModifierNode(startOffset, length, node1, node2), nil
	case 129:

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *StatementsNode")
		}

		optionalNode4, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode4: %w", err)
		}

		castedOptionalNode4, ok := optionalNode4.(*RescueNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode4 to *RescueNode")
		}

		return NewRescueNode(startOffset, length, nodes1, optionalNode2, castedOptionalNode3, castedOptionalNode4), nil
	case 130:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}

		optionalConstant1, err := loadOptionalConstant(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalConstant1: %w", err)
		}

		return NewRestParameterNode(startOffset, length, flags, optionalConstant1), nil
	case 131:
		return NewRetryNode(startOffset, length), nil
	case 132:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*ArgumentsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *ArgumentsNode")
		}

		return NewReturnNode(startOffset, length, castedOptionalNode1), nil
	case 133:
		return NewSelfNode(startOffset, length), nil
	case 134:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		return NewShareableConstantNode(startOffset, length, flags, node1), nil
	case 135:

		constants1, err := loadConstants(buff, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load constants1: %w", err)
		}

		node2, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node2: %w", err)
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		return NewSingletonClassNode(startOffset, length, constants1, node2, optionalNode3), nil
	case 136:
		return NewSourceEncodingNode(startOffset, length), nil
	case 137:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		str1, err := loadString(buff, source)
		if err != nil {
			return nil, fmt.Errorf("failed to load str1: %w", err)
		}

		return NewSourceFileNode(startOffset, length, flags, str1), nil
	case 138:
		return NewSourceLineNode(startOffset, length), nil
	case 139:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		return NewSplatNode(startOffset, length, optionalNode1), nil
	case 140:

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewStatementsNode(startOffset, length, nodes1), nil
	case 141:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		str1, err := loadString(buff, source)
		if err != nil {
			return nil, fmt.Errorf("failed to load str1: %w", err)
		}

		return NewStringNode(startOffset, length, flags, str1), nil
	case 142:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*ArgumentsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *ArgumentsNode")
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		return NewSuperNode(startOffset, length, castedOptionalNode1, optionalNode2), nil
	case 143:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		str1, err := loadString(buff, source)
		if err != nil {
			return nil, fmt.Errorf("failed to load str1: %w", err)
		}

		return NewSymbolNode(startOffset, length, flags, str1), nil
	case 144:
		return NewTrueNode(startOffset, length), nil
	case 145:

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		return NewUndefNode(startOffset, length, nodes1), nil
	case 146:
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *StatementsNode")
		}

		optionalNode3, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode3: %w", err)
		}

		castedOptionalNode3, ok := optionalNode3.(*ElseNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode3 to *ElseNode")
		}

		return NewUnlessNode(startOffset, length, node1, castedOptionalNode2, castedOptionalNode3), nil
	case 147:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *StatementsNode")
		}

		return NewUntilNode(startOffset, length, flags, node1, castedOptionalNode2), nil
	case 148:

		nodes1, err := loadNodeList(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load nodes1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *StatementsNode")
		}

		return NewWhenNode(startOffset, length, nodes1, castedOptionalNode2), nil
	case 149:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		node1, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node1: %w", err)
		}

		optionalNode2, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode2: %w", err)
		}

		castedOptionalNode2, ok := optionalNode2.(*StatementsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode2 to *StatementsNode")
		}

		return NewWhileNode(startOffset, length, flags, node1, castedOptionalNode2), nil
	case 150:
		flags, err := loadFlags(buff)
		if err != nil {
			return nil, fmt.Errorf("failed to read flags: %w", err)
		}
		str1, err := loadString(buff, source)
		if err != nil {
			return nil, fmt.Errorf("failed to load str1: %w", err)
		}

		return NewXStringNode(startOffset, length, flags, str1), nil
	case 151:
		optionalNode1, err := loadOptionalNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load optionalNode1: %w", err)
		}

		castedOptionalNode1, ok := optionalNode1.(*ArgumentsNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedOptionalNode1 to *ArgumentsNode")
		}

		return NewYieldNode(startOffset, length, castedOptionalNode1), nil
	default:
		return nil, fmt.Errorf("unknown node type: %d", nodeType)
	}
}

func loadNodeList(buff *SeekableBuffer, source []byte, constantPool *ConstantPool) ([]Node, error) {
	length, err := loadVarUInt(buff)
	if err != nil {
		return nil, fmt.Errorf("failed to read length: %w", err)
	}

	if length == 0 {
		return nil, nil
	}

	nodes := make([]Node, length)

	for i := 0; i < length; i++ {
		node, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node: %w", err)
		}

		nodes[i] = node
	}

	return nodes, nil
}

func loadBlockLocalVariableNodeList(buff *SeekableBuffer, source []byte, constantPool *ConstantPool) ([]*BlockLocalVariableNode, error) {
	length, err := loadVarUInt(buff)
	if err != nil {
		return nil, fmt.Errorf("failed to read length: %w", err)
	}

	if length == 0 {
		return nil, nil
	}

	nodes := make([]*BlockLocalVariableNode, length)

	for i := 0; i < length; i++ {
		node, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node: %w", err)
		}

		castedNode, ok := node.(*BlockLocalVariableNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode to BlockLocalVariableNode")
		}

		nodes[i] = castedNode
	}

	return nodes, nil
}

func loadInNodeList(buff *SeekableBuffer, source []byte, constantPool *ConstantPool) ([]*InNode, error) {
	length, err := loadVarUInt(buff)
	if err != nil {
		return nil, fmt.Errorf("failed to read length: %w", err)
	}

	if length == 0 {
		return nil, nil
	}

	nodes := make([]*InNode, length)

	for i := 0; i < length; i++ {
		node, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node: %w", err)
		}

		castedNode, ok := node.(*InNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode to InNode")
		}

		nodes[i] = castedNode
	}

	return nodes, nil
}

func loadWhenNodeList(buff *SeekableBuffer, source []byte, constantPool *ConstantPool) ([]*WhenNode, error) {
	length, err := loadVarUInt(buff)
	if err != nil {
		return nil, fmt.Errorf("failed to read length: %w", err)
	}

	if length == 0 {
		return nil, nil
	}

	nodes := make([]*WhenNode, length)

	for i := 0; i < length; i++ {
		node, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node: %w", err)
		}

		castedNode, ok := node.(*WhenNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode to WhenNode")
		}

		nodes[i] = castedNode
	}

	return nodes, nil
}

func loadAssocNodeList(buff *SeekableBuffer, source []byte, constantPool *ConstantPool) ([]*AssocNode, error) {
	length, err := loadVarUInt(buff)
	if err != nil {
		return nil, fmt.Errorf("failed to read length: %w", err)
	}

	if length == 0 {
		return nil, nil
	}

	nodes := make([]*AssocNode, length)

	for i := 0; i < length; i++ {
		node, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node: %w", err)
		}

		castedNode, ok := node.(*AssocNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode to AssocNode")
		}

		nodes[i] = castedNode
	}

	return nodes, nil
}

func loadLocalVariableTargetNodeList(buff *SeekableBuffer, source []byte, constantPool *ConstantPool) ([]*LocalVariableTargetNode, error) {
	length, err := loadVarUInt(buff)
	if err != nil {
		return nil, fmt.Errorf("failed to read length: %w", err)
	}

	if length == 0 {
		return nil, nil
	}

	nodes := make([]*LocalVariableTargetNode, length)

	for i := 0; i < length; i++ {
		node, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node: %w", err)
		}

		castedNode, ok := node.(*LocalVariableTargetNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode to LocalVariableTargetNode")
		}

		nodes[i] = castedNode
	}

	return nodes, nil
}

func loadOptionalParameterNodeList(buff *SeekableBuffer, source []byte, constantPool *ConstantPool) ([]*OptionalParameterNode, error) {
	length, err := loadVarUInt(buff)
	if err != nil {
		return nil, fmt.Errorf("failed to read length: %w", err)
	}

	if length == 0 {
		return nil, nil
	}

	nodes := make([]*OptionalParameterNode, length)

	for i := 0; i < length; i++ {
		node, err := loadNode(buff, source, constantPool)
		if err != nil {
			return nil, fmt.Errorf("failed to load node: %w", err)
		}

		castedNode, ok := node.(*OptionalParameterNode)
		if !ok {
			return nil, fmt.Errorf("failed to cast castedNode to OptionalParameterNode")
		}

		nodes[i] = castedNode
	}

	return nodes, nil
}
