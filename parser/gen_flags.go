/*----------------------------------------------------------------------------*/
/* This file is generated by the templates/template.rb script and should not  */
/* be modified manually. See                                                  */
/* templates/../../templates/gen_flags.go.erb                                 */
/* if you are looking to modify the                                           */
/* template                                                                   */
/*----------------------------------------------------------------------------*/

package parser

const ARGUMENTS_NODE_FLAGS_CONTAINS_FORWARDING int16 = 1 << 2
const ARGUMENTS_NODE_FLAGS_CONTAINS_KEYWORDS int16 = 1 << 3
const ARGUMENTS_NODE_FLAGS_CONTAINS_KEYWORD_SPLAT int16 = 1 << 4
const ARGUMENTS_NODE_FLAGS_CONTAINS_SPLAT int16 = 1 << 5
const ARGUMENTS_NODE_FLAGS_CONTAINS_MULTIPLE_SPLATS int16 = 1 << 6

func isArgumentsNodeFlagsContainsForwarding(flags int16) bool {
	return (flags & ARGUMENTS_NODE_FLAGS_CONTAINS_FORWARDING) != 0
}
func isArgumentsNodeFlagsContainsKeywords(flags int16) bool {
	return (flags & ARGUMENTS_NODE_FLAGS_CONTAINS_KEYWORDS) != 0
}
func isArgumentsNodeFlagsContainsKeywordSplat(flags int16) bool {
	return (flags & ARGUMENTS_NODE_FLAGS_CONTAINS_KEYWORD_SPLAT) != 0
}
func isArgumentsNodeFlagsContainsSplat(flags int16) bool {
	return (flags & ARGUMENTS_NODE_FLAGS_CONTAINS_SPLAT) != 0
}
func isArgumentsNodeFlagsContainsMultipleSplats(flags int16) bool {
	return (flags & ARGUMENTS_NODE_FLAGS_CONTAINS_MULTIPLE_SPLATS) != 0
}

const ARRAY_NODE_FLAGS_CONTAINS_SPLAT int16 = 1 << 2

func isArrayNodeFlagsContainsSplat(flags int16) bool {
	return (flags & ARRAY_NODE_FLAGS_CONTAINS_SPLAT) != 0
}

const CALL_NODE_FLAGS_SAFE_NAVIGATION int16 = 1 << 2
const CALL_NODE_FLAGS_VARIABLE_CALL int16 = 1 << 3
const CALL_NODE_FLAGS_ATTRIBUTE_WRITE int16 = 1 << 4
const CALL_NODE_FLAGS_IGNORE_VISIBILITY int16 = 1 << 5

func isCallNodeFlagsSafeNavigation(flags int16) bool {
	return (flags & CALL_NODE_FLAGS_SAFE_NAVIGATION) != 0
}
func isCallNodeFlagsVariableCall(flags int16) bool {
	return (flags & CALL_NODE_FLAGS_VARIABLE_CALL) != 0
}
func isCallNodeFlagsAttributeWrite(flags int16) bool {
	return (flags & CALL_NODE_FLAGS_ATTRIBUTE_WRITE) != 0
}
func isCallNodeFlagsIgnoreVisibility(flags int16) bool {
	return (flags & CALL_NODE_FLAGS_IGNORE_VISIBILITY) != 0
}

const ENCODING_FLAGS_FORCED_UTF8_ENCODING int16 = 1 << 2
const ENCODING_FLAGS_FORCED_BINARY_ENCODING int16 = 1 << 3

func isEncodingFlagsForcedUtf8Encoding(flags int16) bool {
	return (flags & ENCODING_FLAGS_FORCED_UTF8_ENCODING) != 0
}
func isEncodingFlagsForcedBinaryEncoding(flags int16) bool {
	return (flags & ENCODING_FLAGS_FORCED_BINARY_ENCODING) != 0
}

const INTEGER_BASE_FLAGS_BINARY int16 = 1 << 2
const INTEGER_BASE_FLAGS_DECIMAL int16 = 1 << 3
const INTEGER_BASE_FLAGS_OCTAL int16 = 1 << 4
const INTEGER_BASE_FLAGS_HEXADECIMAL int16 = 1 << 5

func isIntegerBaseFlagsBinary(flags int16) bool {
	return (flags & INTEGER_BASE_FLAGS_BINARY) != 0
}
func isIntegerBaseFlagsDecimal(flags int16) bool {
	return (flags & INTEGER_BASE_FLAGS_DECIMAL) != 0
}
func isIntegerBaseFlagsOctal(flags int16) bool {
	return (flags & INTEGER_BASE_FLAGS_OCTAL) != 0
}
func isIntegerBaseFlagsHexadecimal(flags int16) bool {
	return (flags & INTEGER_BASE_FLAGS_HEXADECIMAL) != 0
}

const INTERPOLATED_STRING_NODE_FLAGS_FROZEN int16 = 1 << 2
const INTERPOLATED_STRING_NODE_FLAGS_MUTABLE int16 = 1 << 3

func isInterpolatedStringNodeFlagsFrozen(flags int16) bool {
	return (flags & INTERPOLATED_STRING_NODE_FLAGS_FROZEN) != 0
}
func isInterpolatedStringNodeFlagsMutable(flags int16) bool {
	return (flags & INTERPOLATED_STRING_NODE_FLAGS_MUTABLE) != 0
}

const KEYWORD_HASH_NODE_FLAGS_SYMBOL_KEYS int16 = 1 << 2

func isKeywordHashNodeFlagsSymbolKeys(flags int16) bool {
	return (flags & KEYWORD_HASH_NODE_FLAGS_SYMBOL_KEYS) != 0
}

const LOOP_FLAGS_BEGIN_MODIFIER int16 = 1 << 2

func isLoopFlagsBeginModifier(flags int16) bool {
	return (flags & LOOP_FLAGS_BEGIN_MODIFIER) != 0
}

const PARAMETER_FLAGS_REPEATED_PARAMETER int16 = 1 << 2

func isParameterFlagsRepeatedParameter(flags int16) bool {
	return (flags & PARAMETER_FLAGS_REPEATED_PARAMETER) != 0
}

const RANGE_FLAGS_EXCLUDE_END int16 = 1 << 2

func isRangeFlagsExcludeEnd(flags int16) bool {
	return (flags & RANGE_FLAGS_EXCLUDE_END) != 0
}

const REGULAR_EXPRESSION_FLAGS_IGNORE_CASE int16 = 1 << 2
const REGULAR_EXPRESSION_FLAGS_EXTENDED int16 = 1 << 3
const REGULAR_EXPRESSION_FLAGS_MULTI_LINE int16 = 1 << 4
const REGULAR_EXPRESSION_FLAGS_ONCE int16 = 1 << 5
const REGULAR_EXPRESSION_FLAGS_EUC_JP int16 = 1 << 6
const REGULAR_EXPRESSION_FLAGS_ASCII_8BIT int16 = 1 << 7
const REGULAR_EXPRESSION_FLAGS_WINDOWS_31J int16 = 1 << 8
const REGULAR_EXPRESSION_FLAGS_UTF_8 int16 = 1 << 9
const REGULAR_EXPRESSION_FLAGS_FORCED_UTF8_ENCODING int16 = 1 << 10
const REGULAR_EXPRESSION_FLAGS_FORCED_BINARY_ENCODING int16 = 1 << 11
const REGULAR_EXPRESSION_FLAGS_FORCED_US_ASCII_ENCODING int16 = 1 << 12

func isRegularExpressionFlagsIgnoreCase(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_IGNORE_CASE) != 0
}
func isRegularExpressionFlagsExtended(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_EXTENDED) != 0
}
func isRegularExpressionFlagsMultiLine(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_MULTI_LINE) != 0
}
func isRegularExpressionFlagsOnce(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_ONCE) != 0
}
func isRegularExpressionFlagsEucJp(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_EUC_JP) != 0
}
func isRegularExpressionFlagsAscii8bit(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_ASCII_8BIT) != 0
}
func isRegularExpressionFlagsWindows31j(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_WINDOWS_31J) != 0
}
func isRegularExpressionFlagsUtf8(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_UTF_8) != 0
}
func isRegularExpressionFlagsForcedUtf8Encoding(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_FORCED_UTF8_ENCODING) != 0
}
func isRegularExpressionFlagsForcedBinaryEncoding(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_FORCED_BINARY_ENCODING) != 0
}
func isRegularExpressionFlagsForcedUsAsciiEncoding(flags int16) bool {
	return (flags & REGULAR_EXPRESSION_FLAGS_FORCED_US_ASCII_ENCODING) != 0
}

const SHAREABLE_CONSTANT_NODE_FLAGS_LITERAL int16 = 1 << 2
const SHAREABLE_CONSTANT_NODE_FLAGS_EXPERIMENTAL_EVERYTHING int16 = 1 << 3
const SHAREABLE_CONSTANT_NODE_FLAGS_EXPERIMENTAL_COPY int16 = 1 << 4

func isShareableConstantNodeFlagsLiteral(flags int16) bool {
	return (flags & SHAREABLE_CONSTANT_NODE_FLAGS_LITERAL) != 0
}
func isShareableConstantNodeFlagsExperimentalEverything(flags int16) bool {
	return (flags & SHAREABLE_CONSTANT_NODE_FLAGS_EXPERIMENTAL_EVERYTHING) != 0
}
func isShareableConstantNodeFlagsExperimentalCopy(flags int16) bool {
	return (flags & SHAREABLE_CONSTANT_NODE_FLAGS_EXPERIMENTAL_COPY) != 0
}

const STRING_FLAGS_FORCED_UTF8_ENCODING int16 = 1 << 2
const STRING_FLAGS_FORCED_BINARY_ENCODING int16 = 1 << 3
const STRING_FLAGS_FROZEN int16 = 1 << 4
const STRING_FLAGS_MUTABLE int16 = 1 << 5

func isStringFlagsForcedUtf8Encoding(flags int16) bool {
	return (flags & STRING_FLAGS_FORCED_UTF8_ENCODING) != 0
}
func isStringFlagsForcedBinaryEncoding(flags int16) bool {
	return (flags & STRING_FLAGS_FORCED_BINARY_ENCODING) != 0
}
func isStringFlagsFrozen(flags int16) bool {
	return (flags & STRING_FLAGS_FROZEN) != 0
}
func isStringFlagsMutable(flags int16) bool {
	return (flags & STRING_FLAGS_MUTABLE) != 0
}

const SYMBOL_FLAGS_FORCED_UTF8_ENCODING int16 = 1 << 2
const SYMBOL_FLAGS_FORCED_BINARY_ENCODING int16 = 1 << 3
const SYMBOL_FLAGS_FORCED_US_ASCII_ENCODING int16 = 1 << 4

func isSymbolFlagsForcedUtf8Encoding(flags int16) bool {
	return (flags & SYMBOL_FLAGS_FORCED_UTF8_ENCODING) != 0
}
func isSymbolFlagsForcedBinaryEncoding(flags int16) bool {
	return (flags & SYMBOL_FLAGS_FORCED_BINARY_ENCODING) != 0
}
func isSymbolFlagsForcedUsAsciiEncoding(flags int16) bool {
	return (flags & SYMBOL_FLAGS_FORCED_US_ASCII_ENCODING) != 0
}
