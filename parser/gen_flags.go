/******************************************************************************/
/* This file is generated by the templates/template.rb script and should not  */
/* be modified manually. See                                                  */
/* templates/gen_flags.go.erb                                                 */
/* if you are looking to modify the                                           */
/* template                                                                   */
/******************************************************************************/

package parser

type ArgumentsNodeFlags int16

const (
	ARGUMENTS_NODE_CONTAINS_KEYWORD_SPLAT ArgumentsNodeFlags = 1 << 0
)

type ArrayNodeFlags int16

const (
	ARRAY_NODE_CONTAINS_SPLAT ArrayNodeFlags = 1 << 0
)

type CallNodeFlags int16

const (
	CALL_NODE_SAFE_NAVIGATION   CallNodeFlags = 1 << 0
	CALL_NODE_VARIABLE_CALL     CallNodeFlags = 1 << 1
	CALL_NODE_ATTRIBUTE_WRITE   CallNodeFlags = 1 << 2
	CALL_NODE_IGNORE_VISIBILITY CallNodeFlags = 1 << 3
)

type EncodingFlags int16

const (
	ENCODING_FORCED_UTF8_ENCODING   EncodingFlags = 1 << 0
	ENCODING_FORCED_BINARY_ENCODING EncodingFlags = 1 << 1
)

type IntegerBaseFlags int16

const (
	INTEGER_BASE_BINARY      IntegerBaseFlags = 1 << 0
	INTEGER_BASE_DECIMAL     IntegerBaseFlags = 1 << 1
	INTEGER_BASE_OCTAL       IntegerBaseFlags = 1 << 2
	INTEGER_BASE_HEXADECIMAL IntegerBaseFlags = 1 << 3
)

type KeywordHashNodeFlags int16

const (
	KEYWORD_HASH_NODE_SYMBOL_KEYS KeywordHashNodeFlags = 1 << 0
)

type LoopFlags int16

const (
	LOOP_BEGIN_MODIFIER LoopFlags = 1 << 0
)

type ParameterFlags int16

const (
	PARAMETER_REPEATED_PARAMETER ParameterFlags = 1 << 0
)

type RangeFlags int16

const (
	RANGE_EXCLUDE_END RangeFlags = 1 << 0
)

type RegularExpressionFlags int16

const (
	REGULAR_EXPRESSION_IGNORE_CASE              RegularExpressionFlags = 1 << 0
	REGULAR_EXPRESSION_EXTENDED                 RegularExpressionFlags = 1 << 1
	REGULAR_EXPRESSION_MULTI_LINE               RegularExpressionFlags = 1 << 2
	REGULAR_EXPRESSION_ONCE                     RegularExpressionFlags = 1 << 3
	REGULAR_EXPRESSION_EUC_JP                   RegularExpressionFlags = 1 << 4
	REGULAR_EXPRESSION_ASCII_8BIT               RegularExpressionFlags = 1 << 5
	REGULAR_EXPRESSION_WINDOWS_31J              RegularExpressionFlags = 1 << 6
	REGULAR_EXPRESSION_UTF_8                    RegularExpressionFlags = 1 << 7
	REGULAR_EXPRESSION_FORCED_UTF8_ENCODING     RegularExpressionFlags = 1 << 8
	REGULAR_EXPRESSION_FORCED_BINARY_ENCODING   RegularExpressionFlags = 1 << 9
	REGULAR_EXPRESSION_FORCED_US_ASCII_ENCODING RegularExpressionFlags = 1 << 10
)

type StringFlags int16

const (
	STRING_FORCED_UTF8_ENCODING   StringFlags = 1 << 0
	STRING_FORCED_BINARY_ENCODING StringFlags = 1 << 1
	STRING_FROZEN                 StringFlags = 1 << 2
)

type SymbolFlags int16

const (
	SYMBOL_FORCED_UTF8_ENCODING     SymbolFlags = 1 << 0
	SYMBOL_FORCED_BINARY_ENCODING   SymbolFlags = 1 << 1
	SYMBOL_FORCED_US_ASCII_ENCODING SymbolFlags = 1 << 2
)
