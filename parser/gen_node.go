/*----------------------------------------------------------------------------*/
/* This file is generated by the templates/template.rb script and should not  */
/* be modified manually. See                                                  */
/* templates/../../templates/gen_node.go.erb                                  */
/* if you are looking to modify the                                           */
/* template                                                                   */
/*----------------------------------------------------------------------------*/

package parser

import (
	"fmt"
	"math/big"
	"reflect"
	"strings"
)

type Node interface {
	EndOffset() int
	HasNewLineFlag() bool
	SetNewLineFlag(source *Source, newlineMarked []bool)
	Accept(visitor AbstractNodeVisitor)
	VisitChildNodes(visitor AbstractNodeVisitor)
	ChildNodes() []Node
	String(indent string) string
}

var _ Node = (*BaseNode)(nil)

type BaseNode struct {
	startOffset int
	length      int
	newLineFlag bool
}

func NewBaseNode(startOffset, length int) BaseNode {
	return BaseNode{
		startOffset: startOffset,
		length:      length,
	}
}

func (n *BaseNode) EndOffset() int {
	return n.startOffset + n.length
}

func (n *BaseNode) HasNewLineFlag() bool {
	return n.newLineFlag
}

func (n *BaseNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	line, err := source.FindLine(n.startOffset)
	if !newlineMarked[line] {
		newlineMarked[line] = true
		n.newLineFlag = err == nil
	}
}

func (n *BaseNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *BaseNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *BaseNode) ChildNodes() []Node {
	return []Node{}
}

func (n *BaseNode) String(indent string) string {
	return ""
}

var _ Node = (*AliasGlobalVariableNode)(nil)

type AliasGlobalVariableNode struct {
	BaseNode
	NewName Node
	OldName Node
}

func NewAliasGlobalVariableNode(startOffset int, length int, newName Node, oldName Node) *AliasGlobalVariableNode {
	return &AliasGlobalVariableNode{
		BaseNode: NewBaseNode(startOffset, length),
		NewName:  newName,
		OldName:  oldName,
	}
}

func (n *AliasGlobalVariableNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.NewName.Accept(visitor)
	n.OldName.Accept(visitor)
}

func (n *AliasGlobalVariableNode) ChildNodes() []Node {
	return []Node{n.NewName, n.OldName}
}

func (n *AliasGlobalVariableNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *AliasGlobalVariableNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("NewName: ")
	builder.WriteString(n.NewName.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("OldName: ")
	builder.WriteString(n.OldName.String(indent + "  "))
	return builder.String()
}

var _ Node = (*AliasMethodNode)(nil)

type AliasMethodNode struct {
	BaseNode
	NewName Node
	OldName Node
}

func NewAliasMethodNode(startOffset int, length int, newName Node, oldName Node) *AliasMethodNode {
	return &AliasMethodNode{
		BaseNode: NewBaseNode(startOffset, length),
		NewName:  newName,
		OldName:  oldName,
	}
}

func (n *AliasMethodNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.NewName.Accept(visitor)
	n.OldName.Accept(visitor)
}

func (n *AliasMethodNode) ChildNodes() []Node {
	return []Node{n.NewName, n.OldName}
}

func (n *AliasMethodNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *AliasMethodNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("NewName: ")
	builder.WriteString(n.NewName.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("OldName: ")
	builder.WriteString(n.OldName.String(indent + "  "))
	return builder.String()
}

var _ Node = (*AlternationPatternNode)(nil)

type AlternationPatternNode struct {
	BaseNode
	Left  Node
	Right Node
}

func NewAlternationPatternNode(startOffset int, length int, left Node, right Node) *AlternationPatternNode {
	return &AlternationPatternNode{
		BaseNode: NewBaseNode(startOffset, length),
		Left:     left,
		Right:    right,
	}
}

func (n *AlternationPatternNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Left.Accept(visitor)
	n.Right.Accept(visitor)
}

func (n *AlternationPatternNode) ChildNodes() []Node {
	return []Node{n.Left, n.Right}
}

func (n *AlternationPatternNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *AlternationPatternNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Left: ")
	builder.WriteString(n.Left.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Right: ")
	builder.WriteString(n.Right.String(indent + "  "))
	return builder.String()
}

var _ Node = (*AndNode)(nil)

type AndNode struct {
	BaseNode
	Left  Node
	Right Node
}

func NewAndNode(startOffset int, length int, left Node, right Node) *AndNode {
	return &AndNode{
		BaseNode: NewBaseNode(startOffset, length),
		Left:     left,
		Right:    right,
	}
}

func (n *AndNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Left.Accept(visitor)
	n.Right.Accept(visitor)
}

func (n *AndNode) ChildNodes() []Node {
	return []Node{n.Left, n.Right}
}

func (n *AndNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *AndNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Left: ")
	builder.WriteString(n.Left.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Right: ")
	builder.WriteString(n.Right.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ArgumentsNode)(nil)

type ArgumentsNode struct {
	BaseNode
	Flags     int16
	Arguments []Node
}

func NewArgumentsNode(startOffset int, length int, flags int16, arguments []Node) *ArgumentsNode {
	return &ArgumentsNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Arguments: arguments,
	}
}

func (n *ArgumentsNode) IsContainsForwarding() bool {
	return isArgumentsNodeFlagsContainsForwarding(n.Flags)
}

func (n *ArgumentsNode) IsContainsKeywords() bool {
	return isArgumentsNodeFlagsContainsKeywords(n.Flags)
}

func (n *ArgumentsNode) IsContainsKeywordSplat() bool {
	return isArgumentsNodeFlagsContainsKeywordSplat(n.Flags)
}

func (n *ArgumentsNode) IsContainsSplat() bool {
	return isArgumentsNodeFlagsContainsSplat(n.Flags)
}

func (n *ArgumentsNode) IsContainsMultipleSplats() bool {
	return isArgumentsNodeFlagsContainsMultipleSplats(n.Flags)
}

func (n *ArgumentsNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Arguments {
		child.Accept(visitor)
	}
}

func (n *ArgumentsNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Arguments {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *ArgumentsNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ArgumentsNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("ArgumentsNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	builder.WriteString("\n")
	for _, child := range n.Arguments {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*ArrayNode)(nil)

type ArrayNode struct {
	BaseNode
	Flags    int16
	Elements []Node
}

func NewArrayNode(startOffset int, length int, flags int16, elements []Node) *ArrayNode {
	return &ArrayNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Elements: elements,
	}
}

func (n *ArrayNode) IsContainsSplat() bool {
	return isArrayNodeFlagsContainsSplat(n.Flags)
}

func (n *ArrayNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Elements {
		child.Accept(visitor)
	}
}

func (n *ArrayNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Elements {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *ArrayNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ArrayNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("ArrayNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Elements: ")
	builder.WriteString("\n")
	for _, child := range n.Elements {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*ArrayPatternNode)(nil)

type ArrayPatternNode struct {
	BaseNode
	Constant  Node
	Requireds []Node
	Rest      Node
	Posts     []Node
}

func NewArrayPatternNode(startOffset int, length int, constant Node, requireds []Node, rest Node, posts []Node) *ArrayPatternNode {
	return &ArrayPatternNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Constant:  constant,
		Requireds: requireds,
		Rest:      rest,
		Posts:     posts,
	}
}

func (n *ArrayPatternNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Constant != nil {
		n.Constant.Accept(visitor)
	}
	for _, child := range n.Requireds {
		child.Accept(visitor)
	}
	if n.Rest != nil {
		n.Rest.Accept(visitor)
	}
	for _, child := range n.Posts {
		child.Accept(visitor)
	}
}

func (n *ArrayPatternNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	childNodes = append(childNodes, n.Constant)
	for _, child := range n.Requireds {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.Rest)
	for _, child := range n.Posts {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *ArrayPatternNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ArrayPatternNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Constant: ")
	if n.Constant == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Constant.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Requireds: ")
	builder.WriteString("\n")
	for _, child := range n.Requireds {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Rest: ")
	if n.Rest == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Rest.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Posts: ")
	builder.WriteString("\n")
	for _, child := range n.Posts {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*AssocNode)(nil)

type AssocNode struct {
	BaseNode
	Key   Node
	Value Node
}

func NewAssocNode(startOffset int, length int, key Node, value Node) *AssocNode {
	return &AssocNode{
		BaseNode: NewBaseNode(startOffset, length),
		Key:      key,
		Value:    value,
	}
}

func (n *AssocNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Key.Accept(visitor)
	n.Value.Accept(visitor)
}

func (n *AssocNode) ChildNodes() []Node {
	return []Node{n.Key, n.Value}
}

func (n *AssocNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *AssocNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Key: ")
	builder.WriteString(n.Key.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*AssocSplatNode)(nil)

type AssocSplatNode struct {
	BaseNode
	Value Node
}

func NewAssocSplatNode(startOffset int, length int, value Node) *AssocSplatNode {
	return &AssocSplatNode{
		BaseNode: NewBaseNode(startOffset, length),
		Value:    value,
	}
}

func (n *AssocSplatNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Value != nil {
		n.Value.Accept(visitor)
	}
}

func (n *AssocSplatNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *AssocSplatNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *AssocSplatNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	if n.Value == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Value.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*BackReferenceReadNode)(nil)

type BackReferenceReadNode struct {
	BaseNode
	Name string
}

func NewBackReferenceReadNode(startOffset int, length int, name string) *BackReferenceReadNode {
	return &BackReferenceReadNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
	}
}

func (n *BackReferenceReadNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *BackReferenceReadNode) ChildNodes() []Node {
	return []Node{}
}

func (n *BackReferenceReadNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *BackReferenceReadNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*BeginNode)(nil)

type BeginNode struct {
	BaseNode
	Statements   *StatementsNode
	RescueClause *RescueNode
	ElseClause   *ElseNode
	EnsureClause *EnsureNode
}

func NewBeginNode(startOffset int, length int, statements *StatementsNode, rescueClause *RescueNode, elseClause *ElseNode, ensureClause *EnsureNode) *BeginNode {
	return &BeginNode{
		BaseNode:     NewBaseNode(startOffset, length),
		Statements:   statements,
		RescueClause: rescueClause,
		ElseClause:   elseClause,
		EnsureClause: ensureClause,
	}
}

func (n *BeginNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	// Never mark BeginNode with a newline flag, mark children instead
}

func (n *BeginNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
	if n.RescueClause != nil {
		n.RescueClause.Accept(visitor)
	}
	if n.ElseClause != nil {
		n.ElseClause.Accept(visitor)
	}
	if n.EnsureClause != nil {
		n.EnsureClause.Accept(visitor)
	}
}

func (n *BeginNode) ChildNodes() []Node {
	return []Node{n.Statements, n.RescueClause, n.ElseClause, n.EnsureClause}
}

func (n *BeginNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *BeginNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("RescueClause: ")
	if n.RescueClause == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.RescueClause.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("ElseClause: ")
	if n.ElseClause == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.ElseClause.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("EnsureClause: ")
	if n.EnsureClause == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.EnsureClause.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*BlockArgumentNode)(nil)

type BlockArgumentNode struct {
	BaseNode
	Expression Node
}

func NewBlockArgumentNode(startOffset int, length int, expression Node) *BlockArgumentNode {
	return &BlockArgumentNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Expression: expression,
	}
}

func (n *BlockArgumentNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Expression != nil {
		n.Expression.Accept(visitor)
	}
}

func (n *BlockArgumentNode) ChildNodes() []Node {
	return []Node{n.Expression}
}

func (n *BlockArgumentNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *BlockArgumentNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Expression: ")
	if n.Expression == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Expression.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*BlockLocalVariableNode)(nil)

type BlockLocalVariableNode struct {
	BaseNode
	Flags int16
	Name  string
}

func NewBlockLocalVariableNode(startOffset int, length int, flags int16, name string) *BlockLocalVariableNode {
	return &BlockLocalVariableNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Name:     name,
	}
}

func (n *BlockLocalVariableNode) IsRepeatedParameter() bool {
	return isParameterFlagsRepeatedParameter(n.Flags)
}

func (n *BlockLocalVariableNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *BlockLocalVariableNode) ChildNodes() []Node {
	return []Node{}
}

func (n *BlockLocalVariableNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *BlockLocalVariableNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("ParameterFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*BlockNode)(nil)

type BlockNode struct {
	BaseNode
	Locals     []string
	Parameters Node
	Body       Node
}

func NewBlockNode(startOffset int, length int, locals []string, parameters Node, body Node) *BlockNode {
	return &BlockNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Locals:     locals,
		Parameters: parameters,
		Body:       body,
	}
}

func (n *BlockNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Parameters != nil {
		n.Parameters.Accept(visitor)
	}
	if n.Body != nil {
		n.Body.Accept(visitor)
	}
}

func (n *BlockNode) ChildNodes() []Node {
	return []Node{n.Parameters, n.Body}
}

func (n *BlockNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *BlockNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Locals: ")
	builder.WriteString("\n")
	for _, constant := range n.Locals {
		builder.WriteString(nextNextIndent)
		builder.WriteString("\"")
		builder.WriteString(constant)
		builder.WriteString("\"")
		builder.WriteString("\n")
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Parameters: ")
	if n.Parameters == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Parameters.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Body: ")
	if n.Body == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Body.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*BlockParameterNode)(nil)

type BlockParameterNode struct {
	BaseNode
	Flags int16
	Name  *string
}

func NewBlockParameterNode(startOffset int, length int, flags int16, name *string) *BlockParameterNode {
	return &BlockParameterNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Name:     name,
	}
}

func (n *BlockParameterNode) IsRepeatedParameter() bool {
	return isParameterFlagsRepeatedParameter(n.Flags)
}

func (n *BlockParameterNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *BlockParameterNode) ChildNodes() []Node {
	return []Node{}
}

func (n *BlockParameterNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *BlockParameterNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("ParameterFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	if n.Name == nil {
		builder.WriteString("nil")
	} else {
		builder.WriteString("\"")
		builder.WriteString(fmt.Sprint(n.Name))
		builder.WriteString("\"")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*BlockParametersNode)(nil)

type BlockParametersNode struct {
	BaseNode
	Parameters *ParametersNode
	Locals     []*BlockLocalVariableNode
}

func NewBlockParametersNode(startOffset int, length int, parameters *ParametersNode, locals []*BlockLocalVariableNode) *BlockParametersNode {
	return &BlockParametersNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Parameters: parameters,
		Locals:     locals,
	}
}

func (n *BlockParametersNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Parameters != nil {
		n.Parameters.Accept(visitor)
	}
	for _, child := range n.Locals {
		child.Accept(visitor)
	}
}

func (n *BlockParametersNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	childNodes = append(childNodes, n.Parameters)
	for _, child := range n.Locals {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *BlockParametersNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *BlockParametersNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Parameters: ")
	if n.Parameters == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Parameters.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Locals: ")
	builder.WriteString("\n")
	for _, child := range n.Locals {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*BreakNode)(nil)

type BreakNode struct {
	BaseNode
	Arguments *ArgumentsNode
}

func NewBreakNode(startOffset int, length int, arguments *ArgumentsNode) *BreakNode {
	return &BreakNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Arguments: arguments,
	}
}

func (n *BreakNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Arguments != nil {
		n.Arguments.Accept(visitor)
	}
}

func (n *BreakNode) ChildNodes() []Node {
	return []Node{n.Arguments}
}

func (n *BreakNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *BreakNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	if n.Arguments == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Arguments.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*CallAndWriteNode)(nil)

type CallAndWriteNode struct {
	BaseNode
	Flags     int16
	Receiver  Node
	ReadName  string
	WriteName string
	Value     Node
}

func NewCallAndWriteNode(startOffset int, length int, flags int16, receiver Node, readName string, writeName string, value Node) *CallAndWriteNode {
	return &CallAndWriteNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Receiver:  receiver,
		ReadName:  readName,
		WriteName: writeName,
		Value:     value,
	}
}

func (n *CallAndWriteNode) IsSafeNavigation() bool {
	return isCallNodeFlagsSafeNavigation(n.Flags)
}

func (n *CallAndWriteNode) IsVariableCall() bool {
	return isCallNodeFlagsVariableCall(n.Flags)
}

func (n *CallAndWriteNode) IsAttributeWrite() bool {
	return isCallNodeFlagsAttributeWrite(n.Flags)
}

func (n *CallAndWriteNode) IsIgnoreVisibility() bool {
	return isCallNodeFlagsIgnoreVisibility(n.Flags)
}

func (n *CallAndWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Receiver != nil {
		n.Receiver.Accept(visitor)
	}
	n.Value.Accept(visitor)
}

func (n *CallAndWriteNode) ChildNodes() []Node {
	return []Node{n.Receiver, n.Value}
}

func (n *CallAndWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *CallAndWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("CallNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Receiver: ")
	if n.Receiver == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Receiver.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("ReadName: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.ReadName))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("WriteName: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.WriteName))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*CallNode)(nil)

type CallNode struct {
	BaseNode
	Flags     int16
	Receiver  Node
	Name      string
	Arguments *ArgumentsNode
	Block     Node
}

func NewCallNode(startOffset int, length int, flags int16, receiver Node, name string, arguments *ArgumentsNode, block Node) *CallNode {
	return &CallNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Receiver:  receiver,
		Name:      name,
		Arguments: arguments,
		Block:     block,
	}
}

func (n *CallNode) IsSafeNavigation() bool {
	return isCallNodeFlagsSafeNavigation(n.Flags)
}

func (n *CallNode) IsVariableCall() bool {
	return isCallNodeFlagsVariableCall(n.Flags)
}

func (n *CallNode) IsAttributeWrite() bool {
	return isCallNodeFlagsAttributeWrite(n.Flags)
}

func (n *CallNode) IsIgnoreVisibility() bool {
	return isCallNodeFlagsIgnoreVisibility(n.Flags)
}

func (n *CallNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Receiver != nil {
		n.Receiver.Accept(visitor)
	}
	if n.Arguments != nil {
		n.Arguments.Accept(visitor)
	}
	if n.Block != nil {
		n.Block.Accept(visitor)
	}
}

func (n *CallNode) ChildNodes() []Node {
	return []Node{n.Receiver, n.Arguments, n.Block}
}

func (n *CallNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *CallNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("CallNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Receiver: ")
	if n.Receiver == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Receiver.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	if n.Arguments == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Arguments.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Block: ")
	if n.Block == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Block.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*CallOperatorWriteNode)(nil)

type CallOperatorWriteNode struct {
	BaseNode
	Flags          int16
	Receiver       Node
	ReadName       string
	WriteName      string
	BinaryOperator string
	Value          Node
}

func NewCallOperatorWriteNode(startOffset int, length int, flags int16, receiver Node, readName string, writeName string, binaryOperator string, value Node) *CallOperatorWriteNode {
	return &CallOperatorWriteNode{
		BaseNode:       NewBaseNode(startOffset, length),
		Flags:          flags,
		Receiver:       receiver,
		ReadName:       readName,
		WriteName:      writeName,
		BinaryOperator: binaryOperator,
		Value:          value,
	}
}

func (n *CallOperatorWriteNode) IsSafeNavigation() bool {
	return isCallNodeFlagsSafeNavigation(n.Flags)
}

func (n *CallOperatorWriteNode) IsVariableCall() bool {
	return isCallNodeFlagsVariableCall(n.Flags)
}

func (n *CallOperatorWriteNode) IsAttributeWrite() bool {
	return isCallNodeFlagsAttributeWrite(n.Flags)
}

func (n *CallOperatorWriteNode) IsIgnoreVisibility() bool {
	return isCallNodeFlagsIgnoreVisibility(n.Flags)
}

func (n *CallOperatorWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Receiver != nil {
		n.Receiver.Accept(visitor)
	}
	n.Value.Accept(visitor)
}

func (n *CallOperatorWriteNode) ChildNodes() []Node {
	return []Node{n.Receiver, n.Value}
}

func (n *CallOperatorWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *CallOperatorWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("CallNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Receiver: ")
	if n.Receiver == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Receiver.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("ReadName: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.ReadName))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("WriteName: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.WriteName))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("BinaryOperator: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.BinaryOperator))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*CallOrWriteNode)(nil)

type CallOrWriteNode struct {
	BaseNode
	Flags     int16
	Receiver  Node
	ReadName  string
	WriteName string
	Value     Node
}

func NewCallOrWriteNode(startOffset int, length int, flags int16, receiver Node, readName string, writeName string, value Node) *CallOrWriteNode {
	return &CallOrWriteNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Receiver:  receiver,
		ReadName:  readName,
		WriteName: writeName,
		Value:     value,
	}
}

func (n *CallOrWriteNode) IsSafeNavigation() bool {
	return isCallNodeFlagsSafeNavigation(n.Flags)
}

func (n *CallOrWriteNode) IsVariableCall() bool {
	return isCallNodeFlagsVariableCall(n.Flags)
}

func (n *CallOrWriteNode) IsAttributeWrite() bool {
	return isCallNodeFlagsAttributeWrite(n.Flags)
}

func (n *CallOrWriteNode) IsIgnoreVisibility() bool {
	return isCallNodeFlagsIgnoreVisibility(n.Flags)
}

func (n *CallOrWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Receiver != nil {
		n.Receiver.Accept(visitor)
	}
	n.Value.Accept(visitor)
}

func (n *CallOrWriteNode) ChildNodes() []Node {
	return []Node{n.Receiver, n.Value}
}

func (n *CallOrWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *CallOrWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("CallNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Receiver: ")
	if n.Receiver == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Receiver.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("ReadName: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.ReadName))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("WriteName: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.WriteName))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*CallTargetNode)(nil)

type CallTargetNode struct {
	BaseNode
	Flags    int16
	Receiver Node
	Name     string
}

func NewCallTargetNode(startOffset int, length int, flags int16, receiver Node, name string) *CallTargetNode {
	return &CallTargetNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Receiver: receiver,
		Name:     name,
	}
}

func (n *CallTargetNode) IsSafeNavigation() bool {
	return isCallNodeFlagsSafeNavigation(n.Flags)
}

func (n *CallTargetNode) IsVariableCall() bool {
	return isCallNodeFlagsVariableCall(n.Flags)
}

func (n *CallTargetNode) IsAttributeWrite() bool {
	return isCallNodeFlagsAttributeWrite(n.Flags)
}

func (n *CallTargetNode) IsIgnoreVisibility() bool {
	return isCallNodeFlagsIgnoreVisibility(n.Flags)
}

func (n *CallTargetNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Receiver.Accept(visitor)
}

func (n *CallTargetNode) ChildNodes() []Node {
	return []Node{n.Receiver}
}

func (n *CallTargetNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *CallTargetNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("CallNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Receiver: ")
	builder.WriteString(n.Receiver.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*CapturePatternNode)(nil)

type CapturePatternNode struct {
	BaseNode
	Value  Node
	Target *LocalVariableTargetNode
}

func NewCapturePatternNode(startOffset int, length int, value Node, target *LocalVariableTargetNode) *CapturePatternNode {
	return &CapturePatternNode{
		BaseNode: NewBaseNode(startOffset, length),
		Value:    value,
		Target:   target,
	}
}

func (n *CapturePatternNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
	n.Target.Accept(visitor)
}

func (n *CapturePatternNode) ChildNodes() []Node {
	return []Node{n.Value, n.Target}
}

func (n *CapturePatternNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *CapturePatternNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Target: ")
	builder.WriteString(n.Target.String(indent + "  "))
	return builder.String()
}

var _ Node = (*CaseMatchNode)(nil)

type CaseMatchNode struct {
	BaseNode
	Predicate  Node
	Conditions []*InNode
	ElseClause *ElseNode
}

func NewCaseMatchNode(startOffset int, length int, predicate Node, conditions []*InNode, elseClause *ElseNode) *CaseMatchNode {
	return &CaseMatchNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Predicate:  predicate,
		Conditions: conditions,
		ElseClause: elseClause,
	}
}

func (n *CaseMatchNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Predicate != nil {
		n.Predicate.Accept(visitor)
	}
	for _, child := range n.Conditions {
		child.Accept(visitor)
	}
	if n.ElseClause != nil {
		n.ElseClause.Accept(visitor)
	}
}

func (n *CaseMatchNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	childNodes = append(childNodes, n.Predicate)
	for _, child := range n.Conditions {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.ElseClause)
	return childNodes
}

func (n *CaseMatchNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *CaseMatchNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Predicate: ")
	if n.Predicate == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Predicate.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Conditions: ")
	builder.WriteString("\n")
	for _, child := range n.Conditions {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("ElseClause: ")
	if n.ElseClause == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.ElseClause.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*CaseNode)(nil)

type CaseNode struct {
	BaseNode
	Predicate  Node
	Conditions []*WhenNode
	ElseClause *ElseNode
}

func NewCaseNode(startOffset int, length int, predicate Node, conditions []*WhenNode, elseClause *ElseNode) *CaseNode {
	return &CaseNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Predicate:  predicate,
		Conditions: conditions,
		ElseClause: elseClause,
	}
}

func (n *CaseNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Predicate != nil {
		n.Predicate.Accept(visitor)
	}
	for _, child := range n.Conditions {
		child.Accept(visitor)
	}
	if n.ElseClause != nil {
		n.ElseClause.Accept(visitor)
	}
}

func (n *CaseNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	childNodes = append(childNodes, n.Predicate)
	for _, child := range n.Conditions {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.ElseClause)
	return childNodes
}

func (n *CaseNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *CaseNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Predicate: ")
	if n.Predicate == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Predicate.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Conditions: ")
	builder.WriteString("\n")
	for _, child := range n.Conditions {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("ElseClause: ")
	if n.ElseClause == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.ElseClause.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*ClassNode)(nil)

type ClassNode struct {
	BaseNode
	Locals       []string
	ConstantPath Node
	Superclass   Node
	Body         Node
	Name         string
}

func NewClassNode(startOffset int, length int, locals []string, constantPath Node, superclass Node, body Node, name string) *ClassNode {
	return &ClassNode{
		BaseNode:     NewBaseNode(startOffset, length),
		Locals:       locals,
		ConstantPath: constantPath,
		Superclass:   superclass,
		Body:         body,
		Name:         name,
	}
}

func (n *ClassNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.ConstantPath.Accept(visitor)
	if n.Superclass != nil {
		n.Superclass.Accept(visitor)
	}
	if n.Body != nil {
		n.Body.Accept(visitor)
	}
}

func (n *ClassNode) ChildNodes() []Node {
	return []Node{n.ConstantPath, n.Superclass, n.Body}
}

func (n *ClassNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ClassNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Locals: ")
	builder.WriteString("\n")
	for _, constant := range n.Locals {
		builder.WriteString(nextNextIndent)
		builder.WriteString("\"")
		builder.WriteString(constant)
		builder.WriteString("\"")
		builder.WriteString("\n")
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("ConstantPath: ")
	builder.WriteString(n.ConstantPath.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Superclass: ")
	if n.Superclass == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Superclass.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Body: ")
	if n.Body == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Body.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ClassVariableAndWriteNode)(nil)

type ClassVariableAndWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewClassVariableAndWriteNode(startOffset int, length int, name string, value Node) *ClassVariableAndWriteNode {
	return &ClassVariableAndWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *ClassVariableAndWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *ClassVariableAndWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *ClassVariableAndWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ClassVariableAndWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ClassVariableOperatorWriteNode)(nil)

type ClassVariableOperatorWriteNode struct {
	BaseNode
	Name           string
	Value          Node
	BinaryOperator string
}

func NewClassVariableOperatorWriteNode(startOffset int, length int, name string, value Node, binaryOperator string) *ClassVariableOperatorWriteNode {
	return &ClassVariableOperatorWriteNode{
		BaseNode:       NewBaseNode(startOffset, length),
		Name:           name,
		Value:          value,
		BinaryOperator: binaryOperator,
	}
}

func (n *ClassVariableOperatorWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *ClassVariableOperatorWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *ClassVariableOperatorWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ClassVariableOperatorWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("BinaryOperator: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.BinaryOperator))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ClassVariableOrWriteNode)(nil)

type ClassVariableOrWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewClassVariableOrWriteNode(startOffset int, length int, name string, value Node) *ClassVariableOrWriteNode {
	return &ClassVariableOrWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *ClassVariableOrWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *ClassVariableOrWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *ClassVariableOrWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ClassVariableOrWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ClassVariableReadNode)(nil)

type ClassVariableReadNode struct {
	BaseNode
	Name string
}

func NewClassVariableReadNode(startOffset int, length int, name string) *ClassVariableReadNode {
	return &ClassVariableReadNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
	}
}

func (n *ClassVariableReadNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *ClassVariableReadNode) ChildNodes() []Node {
	return []Node{}
}

func (n *ClassVariableReadNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ClassVariableReadNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ClassVariableTargetNode)(nil)

type ClassVariableTargetNode struct {
	BaseNode
	Name string
}

func NewClassVariableTargetNode(startOffset int, length int, name string) *ClassVariableTargetNode {
	return &ClassVariableTargetNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
	}
}

func (n *ClassVariableTargetNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *ClassVariableTargetNode) ChildNodes() []Node {
	return []Node{}
}

func (n *ClassVariableTargetNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ClassVariableTargetNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ClassVariableWriteNode)(nil)

type ClassVariableWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewClassVariableWriteNode(startOffset int, length int, name string, value Node) *ClassVariableWriteNode {
	return &ClassVariableWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *ClassVariableWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *ClassVariableWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *ClassVariableWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ClassVariableWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ConstantAndWriteNode)(nil)

type ConstantAndWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewConstantAndWriteNode(startOffset int, length int, name string, value Node) *ConstantAndWriteNode {
	return &ConstantAndWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *ConstantAndWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *ConstantAndWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *ConstantAndWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantAndWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ConstantOperatorWriteNode)(nil)

type ConstantOperatorWriteNode struct {
	BaseNode
	Name           string
	Value          Node
	BinaryOperator string
}

func NewConstantOperatorWriteNode(startOffset int, length int, name string, value Node, binaryOperator string) *ConstantOperatorWriteNode {
	return &ConstantOperatorWriteNode{
		BaseNode:       NewBaseNode(startOffset, length),
		Name:           name,
		Value:          value,
		BinaryOperator: binaryOperator,
	}
}

func (n *ConstantOperatorWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *ConstantOperatorWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *ConstantOperatorWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantOperatorWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("BinaryOperator: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.BinaryOperator))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ConstantOrWriteNode)(nil)

type ConstantOrWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewConstantOrWriteNode(startOffset int, length int, name string, value Node) *ConstantOrWriteNode {
	return &ConstantOrWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *ConstantOrWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *ConstantOrWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *ConstantOrWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantOrWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ConstantPathAndWriteNode)(nil)

type ConstantPathAndWriteNode struct {
	BaseNode
	Target *ConstantPathNode
	Value  Node
}

func NewConstantPathAndWriteNode(startOffset int, length int, target *ConstantPathNode, value Node) *ConstantPathAndWriteNode {
	return &ConstantPathAndWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Target:   target,
		Value:    value,
	}
}

func (n *ConstantPathAndWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Target.Accept(visitor)
	n.Value.Accept(visitor)
}

func (n *ConstantPathAndWriteNode) ChildNodes() []Node {
	return []Node{n.Target, n.Value}
}

func (n *ConstantPathAndWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantPathAndWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Target: ")
	builder.WriteString(n.Target.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ConstantPathNode)(nil)

type ConstantPathNode struct {
	BaseNode
	Parent Node
	Name   *string
}

func NewConstantPathNode(startOffset int, length int, parent Node, name *string) *ConstantPathNode {
	return &ConstantPathNode{
		BaseNode: NewBaseNode(startOffset, length),
		Parent:   parent,
		Name:     name,
	}
}

func (n *ConstantPathNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Parent != nil {
		n.Parent.Accept(visitor)
	}
}

func (n *ConstantPathNode) ChildNodes() []Node {
	return []Node{n.Parent}
}

func (n *ConstantPathNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantPathNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Parent: ")
	if n.Parent == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Parent.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	if n.Name == nil {
		builder.WriteString("nil")
	} else {
		builder.WriteString("\"")
		builder.WriteString(fmt.Sprint(n.Name))
		builder.WriteString("\"")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ConstantPathOperatorWriteNode)(nil)

type ConstantPathOperatorWriteNode struct {
	BaseNode
	Target         *ConstantPathNode
	Value          Node
	BinaryOperator string
}

func NewConstantPathOperatorWriteNode(startOffset int, length int, target *ConstantPathNode, value Node, binaryOperator string) *ConstantPathOperatorWriteNode {
	return &ConstantPathOperatorWriteNode{
		BaseNode:       NewBaseNode(startOffset, length),
		Target:         target,
		Value:          value,
		BinaryOperator: binaryOperator,
	}
}

func (n *ConstantPathOperatorWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Target.Accept(visitor)
	n.Value.Accept(visitor)
}

func (n *ConstantPathOperatorWriteNode) ChildNodes() []Node {
	return []Node{n.Target, n.Value}
}

func (n *ConstantPathOperatorWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantPathOperatorWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Target: ")
	builder.WriteString(n.Target.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("BinaryOperator: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.BinaryOperator))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ConstantPathOrWriteNode)(nil)

type ConstantPathOrWriteNode struct {
	BaseNode
	Target *ConstantPathNode
	Value  Node
}

func NewConstantPathOrWriteNode(startOffset int, length int, target *ConstantPathNode, value Node) *ConstantPathOrWriteNode {
	return &ConstantPathOrWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Target:   target,
		Value:    value,
	}
}

func (n *ConstantPathOrWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Target.Accept(visitor)
	n.Value.Accept(visitor)
}

func (n *ConstantPathOrWriteNode) ChildNodes() []Node {
	return []Node{n.Target, n.Value}
}

func (n *ConstantPathOrWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantPathOrWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Target: ")
	builder.WriteString(n.Target.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ConstantPathTargetNode)(nil)

type ConstantPathTargetNode struct {
	BaseNode
	Parent Node
	Name   *string
}

func NewConstantPathTargetNode(startOffset int, length int, parent Node, name *string) *ConstantPathTargetNode {
	return &ConstantPathTargetNode{
		BaseNode: NewBaseNode(startOffset, length),
		Parent:   parent,
		Name:     name,
	}
}

func (n *ConstantPathTargetNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Parent != nil {
		n.Parent.Accept(visitor)
	}
}

func (n *ConstantPathTargetNode) ChildNodes() []Node {
	return []Node{n.Parent}
}

func (n *ConstantPathTargetNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantPathTargetNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Parent: ")
	if n.Parent == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Parent.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	if n.Name == nil {
		builder.WriteString("nil")
	} else {
		builder.WriteString("\"")
		builder.WriteString(fmt.Sprint(n.Name))
		builder.WriteString("\"")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ConstantPathWriteNode)(nil)

type ConstantPathWriteNode struct {
	BaseNode
	Target *ConstantPathNode
	Value  Node
}

func NewConstantPathWriteNode(startOffset int, length int, target *ConstantPathNode, value Node) *ConstantPathWriteNode {
	return &ConstantPathWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Target:   target,
		Value:    value,
	}
}

func (n *ConstantPathWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Target.Accept(visitor)
	n.Value.Accept(visitor)
}

func (n *ConstantPathWriteNode) ChildNodes() []Node {
	return []Node{n.Target, n.Value}
}

func (n *ConstantPathWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantPathWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Target: ")
	builder.WriteString(n.Target.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ConstantReadNode)(nil)

type ConstantReadNode struct {
	BaseNode
	Name string
}

func NewConstantReadNode(startOffset int, length int, name string) *ConstantReadNode {
	return &ConstantReadNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
	}
}

func (n *ConstantReadNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *ConstantReadNode) ChildNodes() []Node {
	return []Node{}
}

func (n *ConstantReadNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantReadNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ConstantTargetNode)(nil)

type ConstantTargetNode struct {
	BaseNode
	Name string
}

func NewConstantTargetNode(startOffset int, length int, name string) *ConstantTargetNode {
	return &ConstantTargetNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
	}
}

func (n *ConstantTargetNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *ConstantTargetNode) ChildNodes() []Node {
	return []Node{}
}

func (n *ConstantTargetNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantTargetNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ConstantWriteNode)(nil)

type ConstantWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewConstantWriteNode(startOffset int, length int, name string, value Node) *ConstantWriteNode {
	return &ConstantWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *ConstantWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *ConstantWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *ConstantWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ConstantWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*DefNode)(nil)

type DefNode struct {
	BaseNode
	SerializedLength int
	Name             string
	Receiver         Node
	Parameters       *ParametersNode
	Body             Node
	Locals           []string
}

func NewDefNode(startOffset int, length int, serializedLength int, name string, receiver Node, parameters *ParametersNode, body Node, locals []string) *DefNode {
	return &DefNode{
		BaseNode:         NewBaseNode(startOffset, length),
		SerializedLength: serializedLength,
		Name:             name,
		Receiver:         receiver,
		Parameters:       parameters,
		Body:             body,
		Locals:           locals,
	}
}

func (n *DefNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Receiver != nil {
		n.Receiver.Accept(visitor)
	}
	if n.Parameters != nil {
		n.Parameters.Accept(visitor)
	}
	if n.Body != nil {
		n.Body.Accept(visitor)
	}
}

func (n *DefNode) ChildNodes() []Node {
	return []Node{n.Receiver, n.Parameters, n.Body}
}

func (n *DefNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *DefNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Receiver: ")
	if n.Receiver == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Receiver.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Parameters: ")
	if n.Parameters == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Parameters.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Body: ")
	if n.Body == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Body.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Locals: ")
	builder.WriteString("\n")
	for _, constant := range n.Locals {
		builder.WriteString(nextNextIndent)
		builder.WriteString("\"")
		builder.WriteString(constant)
		builder.WriteString("\"")
		builder.WriteString("\n")
	}
	return builder.String()
}

var _ Node = (*DefinedNode)(nil)

type DefinedNode struct {
	BaseNode
	Value Node
}

func NewDefinedNode(startOffset int, length int, value Node) *DefinedNode {
	return &DefinedNode{
		BaseNode: NewBaseNode(startOffset, length),
		Value:    value,
	}
}

func (n *DefinedNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *DefinedNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *DefinedNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *DefinedNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ElseNode)(nil)

type ElseNode struct {
	BaseNode
	Statements *StatementsNode
}

func NewElseNode(startOffset int, length int, statements *StatementsNode) *ElseNode {
	return &ElseNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Statements: statements,
	}
}

func (n *ElseNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
}

func (n *ElseNode) ChildNodes() []Node {
	return []Node{n.Statements}
}

func (n *ElseNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ElseNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*EmbeddedStatementsNode)(nil)

type EmbeddedStatementsNode struct {
	BaseNode
	Statements *StatementsNode
}

func NewEmbeddedStatementsNode(startOffset int, length int, statements *StatementsNode) *EmbeddedStatementsNode {
	return &EmbeddedStatementsNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Statements: statements,
	}
}

func (n *EmbeddedStatementsNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
}

func (n *EmbeddedStatementsNode) ChildNodes() []Node {
	return []Node{n.Statements}
}

func (n *EmbeddedStatementsNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *EmbeddedStatementsNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*EmbeddedVariableNode)(nil)

type EmbeddedVariableNode struct {
	BaseNode
	Variable Node
}

func NewEmbeddedVariableNode(startOffset int, length int, variable Node) *EmbeddedVariableNode {
	return &EmbeddedVariableNode{
		BaseNode: NewBaseNode(startOffset, length),
		Variable: variable,
	}
}

func (n *EmbeddedVariableNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Variable.Accept(visitor)
}

func (n *EmbeddedVariableNode) ChildNodes() []Node {
	return []Node{n.Variable}
}

func (n *EmbeddedVariableNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *EmbeddedVariableNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Variable: ")
	builder.WriteString(n.Variable.String(indent + "  "))
	return builder.String()
}

var _ Node = (*EnsureNode)(nil)

type EnsureNode struct {
	BaseNode
	Statements *StatementsNode
}

func NewEnsureNode(startOffset int, length int, statements *StatementsNode) *EnsureNode {
	return &EnsureNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Statements: statements,
	}
}

func (n *EnsureNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
}

func (n *EnsureNode) ChildNodes() []Node {
	return []Node{n.Statements}
}

func (n *EnsureNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *EnsureNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*FalseNode)(nil)

type FalseNode struct {
	BaseNode
}

func NewFalseNode(startOffset int, length int) *FalseNode {
	return &FalseNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *FalseNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *FalseNode) ChildNodes() []Node {
	return []Node{}
}

func (n *FalseNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *FalseNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*FindPatternNode)(nil)

type FindPatternNode struct {
	BaseNode
	Constant  Node
	Left      *SplatNode
	Requireds []Node
	Right     Node
}

func NewFindPatternNode(startOffset int, length int, constant Node, left *SplatNode, requireds []Node, right Node) *FindPatternNode {
	return &FindPatternNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Constant:  constant,
		Left:      left,
		Requireds: requireds,
		Right:     right,
	}
}

func (n *FindPatternNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Constant != nil {
		n.Constant.Accept(visitor)
	}
	n.Left.Accept(visitor)
	for _, child := range n.Requireds {
		child.Accept(visitor)
	}
	n.Right.Accept(visitor)
}

func (n *FindPatternNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	childNodes = append(childNodes, n.Constant)
	childNodes = append(childNodes, n.Left)
	for _, child := range n.Requireds {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.Right)
	return childNodes
}

func (n *FindPatternNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *FindPatternNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Constant: ")
	if n.Constant == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Constant.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Left: ")
	builder.WriteString(n.Left.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Requireds: ")
	builder.WriteString("\n")
	for _, child := range n.Requireds {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Right: ")
	builder.WriteString(n.Right.String(indent + "  "))
	return builder.String()
}

var _ Node = (*FlipFlopNode)(nil)

type FlipFlopNode struct {
	BaseNode
	Flags int16
	Left  Node
	Right Node
}

func NewFlipFlopNode(startOffset int, length int, flags int16, left Node, right Node) *FlipFlopNode {
	return &FlipFlopNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Left:     left,
		Right:    right,
	}
}

func (n *FlipFlopNode) IsExcludeEnd() bool {
	return isRangeFlagsExcludeEnd(n.Flags)
}

func (n *FlipFlopNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Left != nil {
		n.Left.Accept(visitor)
	}
	if n.Right != nil {
		n.Right.Accept(visitor)
	}
}

func (n *FlipFlopNode) ChildNodes() []Node {
	return []Node{n.Left, n.Right}
}

func (n *FlipFlopNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *FlipFlopNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("RangeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Left: ")
	if n.Left == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Left.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Right: ")
	if n.Right == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Right.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*FloatNode)(nil)

type FloatNode struct {
	BaseNode
	Value float64
}

func NewFloatNode(startOffset int, length int, value float64) *FloatNode {
	return &FloatNode{
		BaseNode: NewBaseNode(startOffset, length),
		Value:    value,
	}
}

func (n *FloatNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *FloatNode) ChildNodes() []Node {
	return []Node{}
}

func (n *FloatNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *FloatNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(fmt.Sprint(n.Value))
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ForNode)(nil)

type ForNode struct {
	BaseNode
	Index      Node
	Collection Node
	Statements *StatementsNode
}

func NewForNode(startOffset int, length int, index Node, collection Node, statements *StatementsNode) *ForNode {
	return &ForNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Index:      index,
		Collection: collection,
		Statements: statements,
	}
}

func (n *ForNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Index.Accept(visitor)
	n.Collection.Accept(visitor)
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
}

func (n *ForNode) ChildNodes() []Node {
	return []Node{n.Index, n.Collection, n.Statements}
}

func (n *ForNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ForNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Index: ")
	builder.WriteString(n.Index.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Collection: ")
	builder.WriteString(n.Collection.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*ForwardingArgumentsNode)(nil)

type ForwardingArgumentsNode struct {
	BaseNode
}

func NewForwardingArgumentsNode(startOffset int, length int) *ForwardingArgumentsNode {
	return &ForwardingArgumentsNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *ForwardingArgumentsNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *ForwardingArgumentsNode) ChildNodes() []Node {
	return []Node{}
}

func (n *ForwardingArgumentsNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ForwardingArgumentsNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ForwardingParameterNode)(nil)

type ForwardingParameterNode struct {
	BaseNode
}

func NewForwardingParameterNode(startOffset int, length int) *ForwardingParameterNode {
	return &ForwardingParameterNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *ForwardingParameterNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *ForwardingParameterNode) ChildNodes() []Node {
	return []Node{}
}

func (n *ForwardingParameterNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ForwardingParameterNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ForwardingSuperNode)(nil)

type ForwardingSuperNode struct {
	BaseNode
	Block *BlockNode
}

func NewForwardingSuperNode(startOffset int, length int, block *BlockNode) *ForwardingSuperNode {
	return &ForwardingSuperNode{
		BaseNode: NewBaseNode(startOffset, length),
		Block:    block,
	}
}

func (n *ForwardingSuperNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Block != nil {
		n.Block.Accept(visitor)
	}
}

func (n *ForwardingSuperNode) ChildNodes() []Node {
	return []Node{n.Block}
}

func (n *ForwardingSuperNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ForwardingSuperNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Block: ")
	if n.Block == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Block.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*GlobalVariableAndWriteNode)(nil)

type GlobalVariableAndWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewGlobalVariableAndWriteNode(startOffset int, length int, name string, value Node) *GlobalVariableAndWriteNode {
	return &GlobalVariableAndWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *GlobalVariableAndWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *GlobalVariableAndWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *GlobalVariableAndWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *GlobalVariableAndWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*GlobalVariableOperatorWriteNode)(nil)

type GlobalVariableOperatorWriteNode struct {
	BaseNode
	Name           string
	Value          Node
	BinaryOperator string
}

func NewGlobalVariableOperatorWriteNode(startOffset int, length int, name string, value Node, binaryOperator string) *GlobalVariableOperatorWriteNode {
	return &GlobalVariableOperatorWriteNode{
		BaseNode:       NewBaseNode(startOffset, length),
		Name:           name,
		Value:          value,
		BinaryOperator: binaryOperator,
	}
}

func (n *GlobalVariableOperatorWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *GlobalVariableOperatorWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *GlobalVariableOperatorWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *GlobalVariableOperatorWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("BinaryOperator: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.BinaryOperator))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*GlobalVariableOrWriteNode)(nil)

type GlobalVariableOrWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewGlobalVariableOrWriteNode(startOffset int, length int, name string, value Node) *GlobalVariableOrWriteNode {
	return &GlobalVariableOrWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *GlobalVariableOrWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *GlobalVariableOrWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *GlobalVariableOrWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *GlobalVariableOrWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*GlobalVariableReadNode)(nil)

type GlobalVariableReadNode struct {
	BaseNode
	Name string
}

func NewGlobalVariableReadNode(startOffset int, length int, name string) *GlobalVariableReadNode {
	return &GlobalVariableReadNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
	}
}

func (n *GlobalVariableReadNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *GlobalVariableReadNode) ChildNodes() []Node {
	return []Node{}
}

func (n *GlobalVariableReadNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *GlobalVariableReadNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*GlobalVariableTargetNode)(nil)

type GlobalVariableTargetNode struct {
	BaseNode
	Name string
}

func NewGlobalVariableTargetNode(startOffset int, length int, name string) *GlobalVariableTargetNode {
	return &GlobalVariableTargetNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
	}
}

func (n *GlobalVariableTargetNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *GlobalVariableTargetNode) ChildNodes() []Node {
	return []Node{}
}

func (n *GlobalVariableTargetNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *GlobalVariableTargetNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*GlobalVariableWriteNode)(nil)

type GlobalVariableWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewGlobalVariableWriteNode(startOffset int, length int, name string, value Node) *GlobalVariableWriteNode {
	return &GlobalVariableWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *GlobalVariableWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *GlobalVariableWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *GlobalVariableWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *GlobalVariableWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*HashNode)(nil)

type HashNode struct {
	BaseNode
	Elements []Node
}

func NewHashNode(startOffset int, length int, elements []Node) *HashNode {
	return &HashNode{
		BaseNode: NewBaseNode(startOffset, length),
		Elements: elements,
	}
}

func (n *HashNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Elements {
		child.Accept(visitor)
	}
}

func (n *HashNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Elements {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *HashNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *HashNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Elements: ")
	builder.WriteString("\n")
	for _, child := range n.Elements {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*HashPatternNode)(nil)

type HashPatternNode struct {
	BaseNode
	Constant Node
	Elements []*AssocNode
	Rest     Node
}

func NewHashPatternNode(startOffset int, length int, constant Node, elements []*AssocNode, rest Node) *HashPatternNode {
	return &HashPatternNode{
		BaseNode: NewBaseNode(startOffset, length),
		Constant: constant,
		Elements: elements,
		Rest:     rest,
	}
}

func (n *HashPatternNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Constant != nil {
		n.Constant.Accept(visitor)
	}
	for _, child := range n.Elements {
		child.Accept(visitor)
	}
	if n.Rest != nil {
		n.Rest.Accept(visitor)
	}
}

func (n *HashPatternNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	childNodes = append(childNodes, n.Constant)
	for _, child := range n.Elements {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.Rest)
	return childNodes
}

func (n *HashPatternNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *HashPatternNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Constant: ")
	if n.Constant == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Constant.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Elements: ")
	builder.WriteString("\n")
	for _, child := range n.Elements {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Rest: ")
	if n.Rest == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Rest.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*IfNode)(nil)

type IfNode struct {
	BaseNode
	Predicate  Node
	Statements *StatementsNode
	Subsequent Node
}

func NewIfNode(startOffset int, length int, predicate Node, statements *StatementsNode, subsequent Node) *IfNode {
	return &IfNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Predicate:  predicate,
		Statements: statements,
		Subsequent: subsequent,
	}
}

func (n *IfNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	n.Predicate.SetNewLineFlag(source, newlineMarked)
}

func (n *IfNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Predicate.Accept(visitor)
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
	if n.Subsequent != nil {
		n.Subsequent.Accept(visitor)
	}
}

func (n *IfNode) ChildNodes() []Node {
	return []Node{n.Predicate, n.Statements, n.Subsequent}
}

func (n *IfNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *IfNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Predicate: ")
	builder.WriteString(n.Predicate.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Subsequent: ")
	if n.Subsequent == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Subsequent.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*ImaginaryNode)(nil)

type ImaginaryNode struct {
	BaseNode
	Numeric Node
}

func NewImaginaryNode(startOffset int, length int, numeric Node) *ImaginaryNode {
	return &ImaginaryNode{
		BaseNode: NewBaseNode(startOffset, length),
		Numeric:  numeric,
	}
}

func (n *ImaginaryNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Numeric.Accept(visitor)
}

func (n *ImaginaryNode) ChildNodes() []Node {
	return []Node{n.Numeric}
}

func (n *ImaginaryNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ImaginaryNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Numeric: ")
	builder.WriteString(n.Numeric.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ImplicitNode)(nil)

type ImplicitNode struct {
	BaseNode
	Value Node
}

func NewImplicitNode(startOffset int, length int, value Node) *ImplicitNode {
	return &ImplicitNode{
		BaseNode: NewBaseNode(startOffset, length),
		Value:    value,
	}
}

func (n *ImplicitNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *ImplicitNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *ImplicitNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ImplicitNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ImplicitRestNode)(nil)

type ImplicitRestNode struct {
	BaseNode
}

func NewImplicitRestNode(startOffset int, length int) *ImplicitRestNode {
	return &ImplicitRestNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *ImplicitRestNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *ImplicitRestNode) ChildNodes() []Node {
	return []Node{}
}

func (n *ImplicitRestNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ImplicitRestNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*InNode)(nil)

type InNode struct {
	BaseNode
	Pattern    Node
	Statements *StatementsNode
}

func NewInNode(startOffset int, length int, pattern Node, statements *StatementsNode) *InNode {
	return &InNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Pattern:    pattern,
		Statements: statements,
	}
}

func (n *InNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Pattern.Accept(visitor)
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
}

func (n *InNode) ChildNodes() []Node {
	return []Node{n.Pattern, n.Statements}
}

func (n *InNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Pattern: ")
	builder.WriteString(n.Pattern.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*IndexAndWriteNode)(nil)

type IndexAndWriteNode struct {
	BaseNode
	Flags     int16
	Receiver  Node
	Arguments *ArgumentsNode
	Block     *BlockArgumentNode
	Value     Node
}

func NewIndexAndWriteNode(startOffset int, length int, flags int16, receiver Node, arguments *ArgumentsNode, block *BlockArgumentNode, value Node) *IndexAndWriteNode {
	return &IndexAndWriteNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Receiver:  receiver,
		Arguments: arguments,
		Block:     block,
		Value:     value,
	}
}

func (n *IndexAndWriteNode) IsSafeNavigation() bool {
	return isCallNodeFlagsSafeNavigation(n.Flags)
}

func (n *IndexAndWriteNode) IsVariableCall() bool {
	return isCallNodeFlagsVariableCall(n.Flags)
}

func (n *IndexAndWriteNode) IsAttributeWrite() bool {
	return isCallNodeFlagsAttributeWrite(n.Flags)
}

func (n *IndexAndWriteNode) IsIgnoreVisibility() bool {
	return isCallNodeFlagsIgnoreVisibility(n.Flags)
}

func (n *IndexAndWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Receiver != nil {
		n.Receiver.Accept(visitor)
	}
	if n.Arguments != nil {
		n.Arguments.Accept(visitor)
	}
	if n.Block != nil {
		n.Block.Accept(visitor)
	}
	n.Value.Accept(visitor)
}

func (n *IndexAndWriteNode) ChildNodes() []Node {
	return []Node{n.Receiver, n.Arguments, n.Block, n.Value}
}

func (n *IndexAndWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *IndexAndWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("CallNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Receiver: ")
	if n.Receiver == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Receiver.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	if n.Arguments == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Arguments.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Block: ")
	if n.Block == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Block.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*IndexOperatorWriteNode)(nil)

type IndexOperatorWriteNode struct {
	BaseNode
	Flags          int16
	Receiver       Node
	Arguments      *ArgumentsNode
	Block          *BlockArgumentNode
	BinaryOperator string
	Value          Node
}

func NewIndexOperatorWriteNode(startOffset int, length int, flags int16, receiver Node, arguments *ArgumentsNode, block *BlockArgumentNode, binaryOperator string, value Node) *IndexOperatorWriteNode {
	return &IndexOperatorWriteNode{
		BaseNode:       NewBaseNode(startOffset, length),
		Flags:          flags,
		Receiver:       receiver,
		Arguments:      arguments,
		Block:          block,
		BinaryOperator: binaryOperator,
		Value:          value,
	}
}

func (n *IndexOperatorWriteNode) IsSafeNavigation() bool {
	return isCallNodeFlagsSafeNavigation(n.Flags)
}

func (n *IndexOperatorWriteNode) IsVariableCall() bool {
	return isCallNodeFlagsVariableCall(n.Flags)
}

func (n *IndexOperatorWriteNode) IsAttributeWrite() bool {
	return isCallNodeFlagsAttributeWrite(n.Flags)
}

func (n *IndexOperatorWriteNode) IsIgnoreVisibility() bool {
	return isCallNodeFlagsIgnoreVisibility(n.Flags)
}

func (n *IndexOperatorWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Receiver != nil {
		n.Receiver.Accept(visitor)
	}
	if n.Arguments != nil {
		n.Arguments.Accept(visitor)
	}
	if n.Block != nil {
		n.Block.Accept(visitor)
	}
	n.Value.Accept(visitor)
}

func (n *IndexOperatorWriteNode) ChildNodes() []Node {
	return []Node{n.Receiver, n.Arguments, n.Block, n.Value}
}

func (n *IndexOperatorWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *IndexOperatorWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("CallNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Receiver: ")
	if n.Receiver == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Receiver.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	if n.Arguments == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Arguments.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Block: ")
	if n.Block == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Block.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("BinaryOperator: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.BinaryOperator))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*IndexOrWriteNode)(nil)

type IndexOrWriteNode struct {
	BaseNode
	Flags     int16
	Receiver  Node
	Arguments *ArgumentsNode
	Block     *BlockArgumentNode
	Value     Node
}

func NewIndexOrWriteNode(startOffset int, length int, flags int16, receiver Node, arguments *ArgumentsNode, block *BlockArgumentNode, value Node) *IndexOrWriteNode {
	return &IndexOrWriteNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Receiver:  receiver,
		Arguments: arguments,
		Block:     block,
		Value:     value,
	}
}

func (n *IndexOrWriteNode) IsSafeNavigation() bool {
	return isCallNodeFlagsSafeNavigation(n.Flags)
}

func (n *IndexOrWriteNode) IsVariableCall() bool {
	return isCallNodeFlagsVariableCall(n.Flags)
}

func (n *IndexOrWriteNode) IsAttributeWrite() bool {
	return isCallNodeFlagsAttributeWrite(n.Flags)
}

func (n *IndexOrWriteNode) IsIgnoreVisibility() bool {
	return isCallNodeFlagsIgnoreVisibility(n.Flags)
}

func (n *IndexOrWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Receiver != nil {
		n.Receiver.Accept(visitor)
	}
	if n.Arguments != nil {
		n.Arguments.Accept(visitor)
	}
	if n.Block != nil {
		n.Block.Accept(visitor)
	}
	n.Value.Accept(visitor)
}

func (n *IndexOrWriteNode) ChildNodes() []Node {
	return []Node{n.Receiver, n.Arguments, n.Block, n.Value}
}

func (n *IndexOrWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *IndexOrWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("CallNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Receiver: ")
	if n.Receiver == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Receiver.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	if n.Arguments == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Arguments.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Block: ")
	if n.Block == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Block.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*IndexTargetNode)(nil)

type IndexTargetNode struct {
	BaseNode
	Flags     int16
	Receiver  Node
	Arguments *ArgumentsNode
	Block     *BlockArgumentNode
}

func NewIndexTargetNode(startOffset int, length int, flags int16, receiver Node, arguments *ArgumentsNode, block *BlockArgumentNode) *IndexTargetNode {
	return &IndexTargetNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Receiver:  receiver,
		Arguments: arguments,
		Block:     block,
	}
}

func (n *IndexTargetNode) IsSafeNavigation() bool {
	return isCallNodeFlagsSafeNavigation(n.Flags)
}

func (n *IndexTargetNode) IsVariableCall() bool {
	return isCallNodeFlagsVariableCall(n.Flags)
}

func (n *IndexTargetNode) IsAttributeWrite() bool {
	return isCallNodeFlagsAttributeWrite(n.Flags)
}

func (n *IndexTargetNode) IsIgnoreVisibility() bool {
	return isCallNodeFlagsIgnoreVisibility(n.Flags)
}

func (n *IndexTargetNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Receiver.Accept(visitor)
	if n.Arguments != nil {
		n.Arguments.Accept(visitor)
	}
	if n.Block != nil {
		n.Block.Accept(visitor)
	}
}

func (n *IndexTargetNode) ChildNodes() []Node {
	return []Node{n.Receiver, n.Arguments, n.Block}
}

func (n *IndexTargetNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *IndexTargetNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("CallNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Receiver: ")
	builder.WriteString(n.Receiver.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	if n.Arguments == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Arguments.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Block: ")
	if n.Block == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Block.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*InstanceVariableAndWriteNode)(nil)

type InstanceVariableAndWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewInstanceVariableAndWriteNode(startOffset int, length int, name string, value Node) *InstanceVariableAndWriteNode {
	return &InstanceVariableAndWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *InstanceVariableAndWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *InstanceVariableAndWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *InstanceVariableAndWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InstanceVariableAndWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*InstanceVariableOperatorWriteNode)(nil)

type InstanceVariableOperatorWriteNode struct {
	BaseNode
	Name           string
	Value          Node
	BinaryOperator string
}

func NewInstanceVariableOperatorWriteNode(startOffset int, length int, name string, value Node, binaryOperator string) *InstanceVariableOperatorWriteNode {
	return &InstanceVariableOperatorWriteNode{
		BaseNode:       NewBaseNode(startOffset, length),
		Name:           name,
		Value:          value,
		BinaryOperator: binaryOperator,
	}
}

func (n *InstanceVariableOperatorWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *InstanceVariableOperatorWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *InstanceVariableOperatorWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InstanceVariableOperatorWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("BinaryOperator: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.BinaryOperator))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*InstanceVariableOrWriteNode)(nil)

type InstanceVariableOrWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewInstanceVariableOrWriteNode(startOffset int, length int, name string, value Node) *InstanceVariableOrWriteNode {
	return &InstanceVariableOrWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *InstanceVariableOrWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *InstanceVariableOrWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *InstanceVariableOrWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InstanceVariableOrWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*InstanceVariableReadNode)(nil)

type InstanceVariableReadNode struct {
	BaseNode
	Name string
}

func NewInstanceVariableReadNode(startOffset int, length int, name string) *InstanceVariableReadNode {
	return &InstanceVariableReadNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
	}
}

func (n *InstanceVariableReadNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *InstanceVariableReadNode) ChildNodes() []Node {
	return []Node{}
}

func (n *InstanceVariableReadNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InstanceVariableReadNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*InstanceVariableTargetNode)(nil)

type InstanceVariableTargetNode struct {
	BaseNode
	Name string
}

func NewInstanceVariableTargetNode(startOffset int, length int, name string) *InstanceVariableTargetNode {
	return &InstanceVariableTargetNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
	}
}

func (n *InstanceVariableTargetNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *InstanceVariableTargetNode) ChildNodes() []Node {
	return []Node{}
}

func (n *InstanceVariableTargetNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InstanceVariableTargetNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*InstanceVariableWriteNode)(nil)

type InstanceVariableWriteNode struct {
	BaseNode
	Name  string
	Value Node
}

func NewInstanceVariableWriteNode(startOffset int, length int, name string, value Node) *InstanceVariableWriteNode {
	return &InstanceVariableWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Value:    value,
	}
}

func (n *InstanceVariableWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *InstanceVariableWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *InstanceVariableWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InstanceVariableWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*IntegerNode)(nil)

type IntegerNode struct {
	BaseNode
	Flags int16
	Value *big.Int
}

func NewIntegerNode(startOffset int, length int, flags int16, value *big.Int) *IntegerNode {
	return &IntegerNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Value:    value,
	}
}

func (n *IntegerNode) IsBinary() bool {
	return isIntegerBaseFlagsBinary(n.Flags)
}

func (n *IntegerNode) IsDecimal() bool {
	return isIntegerBaseFlagsDecimal(n.Flags)
}

func (n *IntegerNode) IsOctal() bool {
	return isIntegerBaseFlagsOctal(n.Flags)
}

func (n *IntegerNode) IsHexadecimal() bool {
	return isIntegerBaseFlagsHexadecimal(n.Flags)
}

func (n *IntegerNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *IntegerNode) ChildNodes() []Node {
	return []Node{}
}

func (n *IntegerNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *IntegerNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("IntegerBaseFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(fmt.Sprint(n.Value))
	return builder.String()
}

var _ Node = (*InterpolatedMatchLastLineNode)(nil)

type InterpolatedMatchLastLineNode struct {
	BaseNode
	Flags int16
	Parts []Node
}

func NewInterpolatedMatchLastLineNode(startOffset int, length int, flags int16, parts []Node) *InterpolatedMatchLastLineNode {
	return &InterpolatedMatchLastLineNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Parts:    parts,
	}
}

func (n *InterpolatedMatchLastLineNode) IsIgnoreCase() bool {
	return isRegularExpressionFlagsIgnoreCase(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) IsExtended() bool {
	return isRegularExpressionFlagsExtended(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) IsMultiLine() bool {
	return isRegularExpressionFlagsMultiLine(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) IsOnce() bool {
	return isRegularExpressionFlagsOnce(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) IsEucJp() bool {
	return isRegularExpressionFlagsEucJp(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) IsAscii8bit() bool {
	return isRegularExpressionFlagsAscii8bit(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) IsWindows31j() bool {
	return isRegularExpressionFlagsWindows31j(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) IsUtf8() bool {
	return isRegularExpressionFlagsUtf8(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) IsForcedUtf8Encoding() bool {
	return isRegularExpressionFlagsForcedUtf8Encoding(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) IsForcedBinaryEncoding() bool {
	return isRegularExpressionFlagsForcedBinaryEncoding(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) IsForcedUsAsciiEncoding() bool {
	return isRegularExpressionFlagsForcedUsAsciiEncoding(n.Flags)
}

func (n *InterpolatedMatchLastLineNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	var first Node
	if len(n.Parts) > 0 {
		first = n.Parts[0]
	} else {
		first = nil
	}

	if first != nil {
		first.SetNewLineFlag(source, newlineMarked)
	}
}

func (n *InterpolatedMatchLastLineNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Parts {
		child.Accept(visitor)
	}
}

func (n *InterpolatedMatchLastLineNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Parts {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *InterpolatedMatchLastLineNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InterpolatedMatchLastLineNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("RegularExpressionFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Parts: ")
	builder.WriteString("\n")
	for _, child := range n.Parts {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*InterpolatedRegularExpressionNode)(nil)

type InterpolatedRegularExpressionNode struct {
	BaseNode
	Flags int16
	Parts []Node
}

func NewInterpolatedRegularExpressionNode(startOffset int, length int, flags int16, parts []Node) *InterpolatedRegularExpressionNode {
	return &InterpolatedRegularExpressionNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Parts:    parts,
	}
}

func (n *InterpolatedRegularExpressionNode) IsIgnoreCase() bool {
	return isRegularExpressionFlagsIgnoreCase(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) IsExtended() bool {
	return isRegularExpressionFlagsExtended(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) IsMultiLine() bool {
	return isRegularExpressionFlagsMultiLine(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) IsOnce() bool {
	return isRegularExpressionFlagsOnce(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) IsEucJp() bool {
	return isRegularExpressionFlagsEucJp(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) IsAscii8bit() bool {
	return isRegularExpressionFlagsAscii8bit(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) IsWindows31j() bool {
	return isRegularExpressionFlagsWindows31j(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) IsUtf8() bool {
	return isRegularExpressionFlagsUtf8(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) IsForcedUtf8Encoding() bool {
	return isRegularExpressionFlagsForcedUtf8Encoding(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) IsForcedBinaryEncoding() bool {
	return isRegularExpressionFlagsForcedBinaryEncoding(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) IsForcedUsAsciiEncoding() bool {
	return isRegularExpressionFlagsForcedUsAsciiEncoding(n.Flags)
}

func (n *InterpolatedRegularExpressionNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	var first Node
	if len(n.Parts) > 0 {
		first = n.Parts[0]
	} else {
		first = nil
	}

	if first != nil {
		first.SetNewLineFlag(source, newlineMarked)
	}
}

func (n *InterpolatedRegularExpressionNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Parts {
		child.Accept(visitor)
	}
}

func (n *InterpolatedRegularExpressionNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Parts {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *InterpolatedRegularExpressionNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InterpolatedRegularExpressionNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("RegularExpressionFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Parts: ")
	builder.WriteString("\n")
	for _, child := range n.Parts {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*InterpolatedStringNode)(nil)

type InterpolatedStringNode struct {
	BaseNode
	Flags int16
	Parts []Node
}

func NewInterpolatedStringNode(startOffset int, length int, flags int16, parts []Node) *InterpolatedStringNode {
	return &InterpolatedStringNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Parts:    parts,
	}
}

func (n *InterpolatedStringNode) IsFrozen() bool {
	return isInterpolatedStringNodeFlagsFrozen(n.Flags)
}

func (n *InterpolatedStringNode) IsMutable() bool {
	return isInterpolatedStringNodeFlagsMutable(n.Flags)
}

func (n *InterpolatedStringNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	var first Node
	if len(n.Parts) > 0 {
		first = n.Parts[0]
	} else {
		first = nil
	}

	if first != nil {
		first.SetNewLineFlag(source, newlineMarked)
	}
}

func (n *InterpolatedStringNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Parts {
		child.Accept(visitor)
	}
}

func (n *InterpolatedStringNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Parts {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *InterpolatedStringNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InterpolatedStringNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("InterpolatedStringNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Parts: ")
	builder.WriteString("\n")
	for _, child := range n.Parts {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*InterpolatedSymbolNode)(nil)

type InterpolatedSymbolNode struct {
	BaseNode
	Parts []Node
}

func NewInterpolatedSymbolNode(startOffset int, length int, parts []Node) *InterpolatedSymbolNode {
	return &InterpolatedSymbolNode{
		BaseNode: NewBaseNode(startOffset, length),
		Parts:    parts,
	}
}

func (n *InterpolatedSymbolNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	var first Node
	if len(n.Parts) > 0 {
		first = n.Parts[0]
	} else {
		first = nil
	}

	if first != nil {
		first.SetNewLineFlag(source, newlineMarked)
	}
}

func (n *InterpolatedSymbolNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Parts {
		child.Accept(visitor)
	}
}

func (n *InterpolatedSymbolNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Parts {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *InterpolatedSymbolNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InterpolatedSymbolNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Parts: ")
	builder.WriteString("\n")
	for _, child := range n.Parts {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*InterpolatedXStringNode)(nil)

type InterpolatedXStringNode struct {
	BaseNode
	Parts []Node
}

func NewInterpolatedXStringNode(startOffset int, length int, parts []Node) *InterpolatedXStringNode {
	return &InterpolatedXStringNode{
		BaseNode: NewBaseNode(startOffset, length),
		Parts:    parts,
	}
}

func (n *InterpolatedXStringNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	var first Node
	if len(n.Parts) > 0 {
		first = n.Parts[0]
	} else {
		first = nil
	}

	if first != nil {
		first.SetNewLineFlag(source, newlineMarked)
	}
}

func (n *InterpolatedXStringNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Parts {
		child.Accept(visitor)
	}
}

func (n *InterpolatedXStringNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Parts {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *InterpolatedXStringNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *InterpolatedXStringNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Parts: ")
	builder.WriteString("\n")
	for _, child := range n.Parts {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*ItLocalVariableReadNode)(nil)

type ItLocalVariableReadNode struct {
	BaseNode
}

func NewItLocalVariableReadNode(startOffset int, length int) *ItLocalVariableReadNode {
	return &ItLocalVariableReadNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *ItLocalVariableReadNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *ItLocalVariableReadNode) ChildNodes() []Node {
	return []Node{}
}

func (n *ItLocalVariableReadNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ItLocalVariableReadNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ItParametersNode)(nil)

type ItParametersNode struct {
	BaseNode
}

func NewItParametersNode(startOffset int, length int) *ItParametersNode {
	return &ItParametersNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *ItParametersNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *ItParametersNode) ChildNodes() []Node {
	return []Node{}
}

func (n *ItParametersNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ItParametersNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*KeywordHashNode)(nil)

type KeywordHashNode struct {
	BaseNode
	Flags    int16
	Elements []Node
}

func NewKeywordHashNode(startOffset int, length int, flags int16, elements []Node) *KeywordHashNode {
	return &KeywordHashNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Elements: elements,
	}
}

func (n *KeywordHashNode) IsSymbolKeys() bool {
	return isKeywordHashNodeFlagsSymbolKeys(n.Flags)
}

func (n *KeywordHashNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Elements {
		child.Accept(visitor)
	}
}

func (n *KeywordHashNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Elements {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *KeywordHashNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *KeywordHashNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("KeywordHashNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Elements: ")
	builder.WriteString("\n")
	for _, child := range n.Elements {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*KeywordRestParameterNode)(nil)

type KeywordRestParameterNode struct {
	BaseNode
	Flags int16
	Name  *string
}

func NewKeywordRestParameterNode(startOffset int, length int, flags int16, name *string) *KeywordRestParameterNode {
	return &KeywordRestParameterNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Name:     name,
	}
}

func (n *KeywordRestParameterNode) IsRepeatedParameter() bool {
	return isParameterFlagsRepeatedParameter(n.Flags)
}

func (n *KeywordRestParameterNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *KeywordRestParameterNode) ChildNodes() []Node {
	return []Node{}
}

func (n *KeywordRestParameterNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *KeywordRestParameterNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("ParameterFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	if n.Name == nil {
		builder.WriteString("nil")
	} else {
		builder.WriteString("\"")
		builder.WriteString(fmt.Sprint(n.Name))
		builder.WriteString("\"")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*LambdaNode)(nil)

type LambdaNode struct {
	BaseNode
	Locals     []string
	Parameters Node
	Body       Node
}

func NewLambdaNode(startOffset int, length int, locals []string, parameters Node, body Node) *LambdaNode {
	return &LambdaNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Locals:     locals,
		Parameters: parameters,
		Body:       body,
	}
}

func (n *LambdaNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Parameters != nil {
		n.Parameters.Accept(visitor)
	}
	if n.Body != nil {
		n.Body.Accept(visitor)
	}
}

func (n *LambdaNode) ChildNodes() []Node {
	return []Node{n.Parameters, n.Body}
}

func (n *LambdaNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *LambdaNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Locals: ")
	builder.WriteString("\n")
	for _, constant := range n.Locals {
		builder.WriteString(nextNextIndent)
		builder.WriteString("\"")
		builder.WriteString(constant)
		builder.WriteString("\"")
		builder.WriteString("\n")
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Parameters: ")
	if n.Parameters == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Parameters.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Body: ")
	if n.Body == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Body.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*LocalVariableAndWriteNode)(nil)

type LocalVariableAndWriteNode struct {
	BaseNode
	Value Node
	Name  string
	Depth uint32
}

func NewLocalVariableAndWriteNode(startOffset int, length int, value Node, name string, depth uint32) *LocalVariableAndWriteNode {
	return &LocalVariableAndWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Value:    value,
		Name:     name,
		Depth:    depth,
	}
}

func (n *LocalVariableAndWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *LocalVariableAndWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *LocalVariableAndWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *LocalVariableAndWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Depth: ")
	builder.WriteString(fmt.Sprint(n.Depth))
	return builder.String()
}

var _ Node = (*LocalVariableOperatorWriteNode)(nil)

type LocalVariableOperatorWriteNode struct {
	BaseNode
	Value          Node
	Name           string
	BinaryOperator string
	Depth          uint32
}

func NewLocalVariableOperatorWriteNode(startOffset int, length int, value Node, name string, binaryOperator string, depth uint32) *LocalVariableOperatorWriteNode {
	return &LocalVariableOperatorWriteNode{
		BaseNode:       NewBaseNode(startOffset, length),
		Value:          value,
		Name:           name,
		BinaryOperator: binaryOperator,
		Depth:          depth,
	}
}

func (n *LocalVariableOperatorWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *LocalVariableOperatorWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *LocalVariableOperatorWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *LocalVariableOperatorWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("BinaryOperator: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.BinaryOperator))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Depth: ")
	builder.WriteString(fmt.Sprint(n.Depth))
	return builder.String()
}

var _ Node = (*LocalVariableOrWriteNode)(nil)

type LocalVariableOrWriteNode struct {
	BaseNode
	Value Node
	Name  string
	Depth uint32
}

func NewLocalVariableOrWriteNode(startOffset int, length int, value Node, name string, depth uint32) *LocalVariableOrWriteNode {
	return &LocalVariableOrWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Value:    value,
		Name:     name,
		Depth:    depth,
	}
}

func (n *LocalVariableOrWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *LocalVariableOrWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *LocalVariableOrWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *LocalVariableOrWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Depth: ")
	builder.WriteString(fmt.Sprint(n.Depth))
	return builder.String()
}

var _ Node = (*LocalVariableReadNode)(nil)

type LocalVariableReadNode struct {
	BaseNode
	Name  string
	Depth uint32
}

func NewLocalVariableReadNode(startOffset int, length int, name string, depth uint32) *LocalVariableReadNode {
	return &LocalVariableReadNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Depth:    depth,
	}
}

func (n *LocalVariableReadNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *LocalVariableReadNode) ChildNodes() []Node {
	return []Node{}
}

func (n *LocalVariableReadNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *LocalVariableReadNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Depth: ")
	builder.WriteString(fmt.Sprint(n.Depth))
	return builder.String()
}

var _ Node = (*LocalVariableTargetNode)(nil)

type LocalVariableTargetNode struct {
	BaseNode
	Name  string
	Depth uint32
}

func NewLocalVariableTargetNode(startOffset int, length int, name string, depth uint32) *LocalVariableTargetNode {
	return &LocalVariableTargetNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Depth:    depth,
	}
}

func (n *LocalVariableTargetNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *LocalVariableTargetNode) ChildNodes() []Node {
	return []Node{}
}

func (n *LocalVariableTargetNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *LocalVariableTargetNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Depth: ")
	builder.WriteString(fmt.Sprint(n.Depth))
	return builder.String()
}

var _ Node = (*LocalVariableWriteNode)(nil)

type LocalVariableWriteNode struct {
	BaseNode
	Name  string
	Depth uint32
	Value Node
}

func NewLocalVariableWriteNode(startOffset int, length int, name string, depth uint32, value Node) *LocalVariableWriteNode {
	return &LocalVariableWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Name:     name,
		Depth:    depth,
		Value:    value,
	}
}

func (n *LocalVariableWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *LocalVariableWriteNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *LocalVariableWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *LocalVariableWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Depth: ")
	builder.WriteString(fmt.Sprint(n.Depth))
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*MatchLastLineNode)(nil)

type MatchLastLineNode struct {
	BaseNode
	Flags     int16
	Unescaped string
}

func NewMatchLastLineNode(startOffset int, length int, flags int16, unescaped string) *MatchLastLineNode {
	return &MatchLastLineNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Unescaped: unescaped,
	}
}

func (n *MatchLastLineNode) IsIgnoreCase() bool {
	return isRegularExpressionFlagsIgnoreCase(n.Flags)
}

func (n *MatchLastLineNode) IsExtended() bool {
	return isRegularExpressionFlagsExtended(n.Flags)
}

func (n *MatchLastLineNode) IsMultiLine() bool {
	return isRegularExpressionFlagsMultiLine(n.Flags)
}

func (n *MatchLastLineNode) IsOnce() bool {
	return isRegularExpressionFlagsOnce(n.Flags)
}

func (n *MatchLastLineNode) IsEucJp() bool {
	return isRegularExpressionFlagsEucJp(n.Flags)
}

func (n *MatchLastLineNode) IsAscii8bit() bool {
	return isRegularExpressionFlagsAscii8bit(n.Flags)
}

func (n *MatchLastLineNode) IsWindows31j() bool {
	return isRegularExpressionFlagsWindows31j(n.Flags)
}

func (n *MatchLastLineNode) IsUtf8() bool {
	return isRegularExpressionFlagsUtf8(n.Flags)
}

func (n *MatchLastLineNode) IsForcedUtf8Encoding() bool {
	return isRegularExpressionFlagsForcedUtf8Encoding(n.Flags)
}

func (n *MatchLastLineNode) IsForcedBinaryEncoding() bool {
	return isRegularExpressionFlagsForcedBinaryEncoding(n.Flags)
}

func (n *MatchLastLineNode) IsForcedUsAsciiEncoding() bool {
	return isRegularExpressionFlagsForcedUsAsciiEncoding(n.Flags)
}

func (n *MatchLastLineNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *MatchLastLineNode) ChildNodes() []Node {
	return []Node{}
}

func (n *MatchLastLineNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *MatchLastLineNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("RegularExpressionFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Unescaped: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Unescaped))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*MatchPredicateNode)(nil)

type MatchPredicateNode struct {
	BaseNode
	Value   Node
	Pattern Node
}

func NewMatchPredicateNode(startOffset int, length int, value Node, pattern Node) *MatchPredicateNode {
	return &MatchPredicateNode{
		BaseNode: NewBaseNode(startOffset, length),
		Value:    value,
		Pattern:  pattern,
	}
}

func (n *MatchPredicateNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
	n.Pattern.Accept(visitor)
}

func (n *MatchPredicateNode) ChildNodes() []Node {
	return []Node{n.Value, n.Pattern}
}

func (n *MatchPredicateNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *MatchPredicateNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Pattern: ")
	builder.WriteString(n.Pattern.String(indent + "  "))
	return builder.String()
}

var _ Node = (*MatchRequiredNode)(nil)

type MatchRequiredNode struct {
	BaseNode
	Value   Node
	Pattern Node
}

func NewMatchRequiredNode(startOffset int, length int, value Node, pattern Node) *MatchRequiredNode {
	return &MatchRequiredNode{
		BaseNode: NewBaseNode(startOffset, length),
		Value:    value,
		Pattern:  pattern,
	}
}

func (n *MatchRequiredNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
	n.Pattern.Accept(visitor)
}

func (n *MatchRequiredNode) ChildNodes() []Node {
	return []Node{n.Value, n.Pattern}
}

func (n *MatchRequiredNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *MatchRequiredNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Pattern: ")
	builder.WriteString(n.Pattern.String(indent + "  "))
	return builder.String()
}

var _ Node = (*MatchWriteNode)(nil)

type MatchWriteNode struct {
	BaseNode
	Call    *CallNode
	Targets []*LocalVariableTargetNode
}

func NewMatchWriteNode(startOffset int, length int, call *CallNode, targets []*LocalVariableTargetNode) *MatchWriteNode {
	return &MatchWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Call:     call,
		Targets:  targets,
	}
}

func (n *MatchWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Call.Accept(visitor)
	for _, child := range n.Targets {
		child.Accept(visitor)
	}
}

func (n *MatchWriteNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	childNodes = append(childNodes, n.Call)
	for _, child := range n.Targets {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *MatchWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *MatchWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Call: ")
	builder.WriteString(n.Call.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Targets: ")
	builder.WriteString("\n")
	for _, child := range n.Targets {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*MissingNode)(nil)

type MissingNode struct {
	BaseNode
}

func NewMissingNode(startOffset int, length int) *MissingNode {
	return &MissingNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *MissingNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *MissingNode) ChildNodes() []Node {
	return []Node{}
}

func (n *MissingNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *MissingNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ModuleNode)(nil)

type ModuleNode struct {
	BaseNode
	Locals       []string
	ConstantPath Node
	Body         Node
	Name         string
}

func NewModuleNode(startOffset int, length int, locals []string, constantPath Node, body Node, name string) *ModuleNode {
	return &ModuleNode{
		BaseNode:     NewBaseNode(startOffset, length),
		Locals:       locals,
		ConstantPath: constantPath,
		Body:         body,
		Name:         name,
	}
}

func (n *ModuleNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.ConstantPath.Accept(visitor)
	if n.Body != nil {
		n.Body.Accept(visitor)
	}
}

func (n *ModuleNode) ChildNodes() []Node {
	return []Node{n.ConstantPath, n.Body}
}

func (n *ModuleNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ModuleNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Locals: ")
	builder.WriteString("\n")
	for _, constant := range n.Locals {
		builder.WriteString(nextNextIndent)
		builder.WriteString("\"")
		builder.WriteString(constant)
		builder.WriteString("\"")
		builder.WriteString("\n")
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("ConstantPath: ")
	builder.WriteString(n.ConstantPath.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Body: ")
	if n.Body == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Body.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*MultiTargetNode)(nil)

type MultiTargetNode struct {
	BaseNode
	Lefts  []Node
	Rest   Node
	Rights []Node
}

func NewMultiTargetNode(startOffset int, length int, lefts []Node, rest Node, rights []Node) *MultiTargetNode {
	return &MultiTargetNode{
		BaseNode: NewBaseNode(startOffset, length),
		Lefts:    lefts,
		Rest:     rest,
		Rights:   rights,
	}
}

func (n *MultiTargetNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Lefts {
		child.Accept(visitor)
	}
	if n.Rest != nil {
		n.Rest.Accept(visitor)
	}
	for _, child := range n.Rights {
		child.Accept(visitor)
	}
}

func (n *MultiTargetNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Lefts {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.Rest)
	for _, child := range n.Rights {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *MultiTargetNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *MultiTargetNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Lefts: ")
	builder.WriteString("\n")
	for _, child := range n.Lefts {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Rest: ")
	if n.Rest == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Rest.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Rights: ")
	builder.WriteString("\n")
	for _, child := range n.Rights {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*MultiWriteNode)(nil)

type MultiWriteNode struct {
	BaseNode
	Lefts  []Node
	Rest   Node
	Rights []Node
	Value  Node
}

func NewMultiWriteNode(startOffset int, length int, lefts []Node, rest Node, rights []Node, value Node) *MultiWriteNode {
	return &MultiWriteNode{
		BaseNode: NewBaseNode(startOffset, length),
		Lefts:    lefts,
		Rest:     rest,
		Rights:   rights,
		Value:    value,
	}
}

func (n *MultiWriteNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Lefts {
		child.Accept(visitor)
	}
	if n.Rest != nil {
		n.Rest.Accept(visitor)
	}
	for _, child := range n.Rights {
		child.Accept(visitor)
	}
	n.Value.Accept(visitor)
}

func (n *MultiWriteNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Lefts {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.Rest)
	for _, child := range n.Rights {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.Value)
	return childNodes
}

func (n *MultiWriteNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *MultiWriteNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Lefts: ")
	builder.WriteString("\n")
	for _, child := range n.Lefts {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Rest: ")
	if n.Rest == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Rest.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Rights: ")
	builder.WriteString("\n")
	for _, child := range n.Rights {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*NextNode)(nil)

type NextNode struct {
	BaseNode
	Arguments *ArgumentsNode
}

func NewNextNode(startOffset int, length int, arguments *ArgumentsNode) *NextNode {
	return &NextNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Arguments: arguments,
	}
}

func (n *NextNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Arguments != nil {
		n.Arguments.Accept(visitor)
	}
}

func (n *NextNode) ChildNodes() []Node {
	return []Node{n.Arguments}
}

func (n *NextNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *NextNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	if n.Arguments == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Arguments.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*NilNode)(nil)

type NilNode struct {
	BaseNode
}

func NewNilNode(startOffset int, length int) *NilNode {
	return &NilNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *NilNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *NilNode) ChildNodes() []Node {
	return []Node{}
}

func (n *NilNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *NilNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*NoKeywordsParameterNode)(nil)

type NoKeywordsParameterNode struct {
	BaseNode
}

func NewNoKeywordsParameterNode(startOffset int, length int) *NoKeywordsParameterNode {
	return &NoKeywordsParameterNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *NoKeywordsParameterNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *NoKeywordsParameterNode) ChildNodes() []Node {
	return []Node{}
}

func (n *NoKeywordsParameterNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *NoKeywordsParameterNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*NumberedParametersNode)(nil)

type NumberedParametersNode struct {
	BaseNode
	Maximum uint8
}

func NewNumberedParametersNode(startOffset int, length int, maximum uint8) *NumberedParametersNode {
	return &NumberedParametersNode{
		BaseNode: NewBaseNode(startOffset, length),
		Maximum:  maximum,
	}
}

func (n *NumberedParametersNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *NumberedParametersNode) ChildNodes() []Node {
	return []Node{}
}

func (n *NumberedParametersNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *NumberedParametersNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Maximum: ")
	builder.WriteString(fmt.Sprint(n.Maximum))
	return builder.String()
}

var _ Node = (*NumberedReferenceReadNode)(nil)

type NumberedReferenceReadNode struct {
	BaseNode
	Number uint32
}

func NewNumberedReferenceReadNode(startOffset int, length int, number uint32) *NumberedReferenceReadNode {
	return &NumberedReferenceReadNode{
		BaseNode: NewBaseNode(startOffset, length),
		Number:   number,
	}
}

func (n *NumberedReferenceReadNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *NumberedReferenceReadNode) ChildNodes() []Node {
	return []Node{}
}

func (n *NumberedReferenceReadNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *NumberedReferenceReadNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Number: ")
	builder.WriteString(fmt.Sprint(n.Number))
	return builder.String()
}

var _ Node = (*OptionalKeywordParameterNode)(nil)

type OptionalKeywordParameterNode struct {
	BaseNode
	Flags int16
	Name  string
	Value Node
}

func NewOptionalKeywordParameterNode(startOffset int, length int, flags int16, name string, value Node) *OptionalKeywordParameterNode {
	return &OptionalKeywordParameterNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Name:     name,
		Value:    value,
	}
}

func (n *OptionalKeywordParameterNode) IsRepeatedParameter() bool {
	return isParameterFlagsRepeatedParameter(n.Flags)
}

func (n *OptionalKeywordParameterNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *OptionalKeywordParameterNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *OptionalKeywordParameterNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *OptionalKeywordParameterNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("ParameterFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*OptionalParameterNode)(nil)

type OptionalParameterNode struct {
	BaseNode
	Flags int16
	Name  string
	Value Node
}

func NewOptionalParameterNode(startOffset int, length int, flags int16, name string, value Node) *OptionalParameterNode {
	return &OptionalParameterNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Name:     name,
		Value:    value,
	}
}

func (n *OptionalParameterNode) IsRepeatedParameter() bool {
	return isParameterFlagsRepeatedParameter(n.Flags)
}

func (n *OptionalParameterNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Value.Accept(visitor)
}

func (n *OptionalParameterNode) ChildNodes() []Node {
	return []Node{n.Value}
}

func (n *OptionalParameterNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *OptionalParameterNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("ParameterFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Value: ")
	builder.WriteString(n.Value.String(indent + "  "))
	return builder.String()
}

var _ Node = (*OrNode)(nil)

type OrNode struct {
	BaseNode
	Left  Node
	Right Node
}

func NewOrNode(startOffset int, length int, left Node, right Node) *OrNode {
	return &OrNode{
		BaseNode: NewBaseNode(startOffset, length),
		Left:     left,
		Right:    right,
	}
}

func (n *OrNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Left.Accept(visitor)
	n.Right.Accept(visitor)
}

func (n *OrNode) ChildNodes() []Node {
	return []Node{n.Left, n.Right}
}

func (n *OrNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *OrNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Left: ")
	builder.WriteString(n.Left.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Right: ")
	builder.WriteString(n.Right.String(indent + "  "))
	return builder.String()
}

var _ Node = (*ParametersNode)(nil)

type ParametersNode struct {
	BaseNode
	Requireds   []Node
	Optionals   []*OptionalParameterNode
	Rest        Node
	Posts       []Node
	Keywords    []Node
	KeywordRest Node
	Block       *BlockParameterNode
}

func NewParametersNode(startOffset int, length int, requireds []Node, optionals []*OptionalParameterNode, rest Node, posts []Node, keywords []Node, keywordRest Node, block *BlockParameterNode) *ParametersNode {
	return &ParametersNode{
		BaseNode:    NewBaseNode(startOffset, length),
		Requireds:   requireds,
		Optionals:   optionals,
		Rest:        rest,
		Posts:       posts,
		Keywords:    keywords,
		KeywordRest: keywordRest,
		Block:       block,
	}
}

func (n *ParametersNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Requireds {
		child.Accept(visitor)
	}
	for _, child := range n.Optionals {
		child.Accept(visitor)
	}
	if n.Rest != nil {
		n.Rest.Accept(visitor)
	}
	for _, child := range n.Posts {
		child.Accept(visitor)
	}
	for _, child := range n.Keywords {
		child.Accept(visitor)
	}
	if n.KeywordRest != nil {
		n.KeywordRest.Accept(visitor)
	}
	if n.Block != nil {
		n.Block.Accept(visitor)
	}
}

func (n *ParametersNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Requireds {
		childNodes = append(childNodes, child)
	}
	for _, child := range n.Optionals {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.Rest)
	for _, child := range n.Posts {
		childNodes = append(childNodes, child)
	}
	for _, child := range n.Keywords {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.KeywordRest)
	childNodes = append(childNodes, n.Block)
	return childNodes
}

func (n *ParametersNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ParametersNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Requireds: ")
	builder.WriteString("\n")
	for _, child := range n.Requireds {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Optionals: ")
	builder.WriteString("\n")
	for _, child := range n.Optionals {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Rest: ")
	if n.Rest == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Rest.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Posts: ")
	builder.WriteString("\n")
	for _, child := range n.Posts {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Keywords: ")
	builder.WriteString("\n")
	for _, child := range n.Keywords {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("KeywordRest: ")
	if n.KeywordRest == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.KeywordRest.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Block: ")
	if n.Block == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Block.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*ParenthesesNode)(nil)

type ParenthesesNode struct {
	BaseNode
	Body Node
}

func NewParenthesesNode(startOffset int, length int, body Node) *ParenthesesNode {
	return &ParenthesesNode{
		BaseNode: NewBaseNode(startOffset, length),
		Body:     body,
	}
}

func (n *ParenthesesNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	// Never mark ParenthesesNode with a newline flag, mark children instead
}

func (n *ParenthesesNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Body != nil {
		n.Body.Accept(visitor)
	}
}

func (n *ParenthesesNode) ChildNodes() []Node {
	return []Node{n.Body}
}

func (n *ParenthesesNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ParenthesesNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Body: ")
	if n.Body == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Body.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*PinnedExpressionNode)(nil)

type PinnedExpressionNode struct {
	BaseNode
	Expression Node
}

func NewPinnedExpressionNode(startOffset int, length int, expression Node) *PinnedExpressionNode {
	return &PinnedExpressionNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Expression: expression,
	}
}

func (n *PinnedExpressionNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Expression.Accept(visitor)
}

func (n *PinnedExpressionNode) ChildNodes() []Node {
	return []Node{n.Expression}
}

func (n *PinnedExpressionNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *PinnedExpressionNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Expression: ")
	builder.WriteString(n.Expression.String(indent + "  "))
	return builder.String()
}

var _ Node = (*PinnedVariableNode)(nil)

type PinnedVariableNode struct {
	BaseNode
	Variable Node
}

func NewPinnedVariableNode(startOffset int, length int, variable Node) *PinnedVariableNode {
	return &PinnedVariableNode{
		BaseNode: NewBaseNode(startOffset, length),
		Variable: variable,
	}
}

func (n *PinnedVariableNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Variable.Accept(visitor)
}

func (n *PinnedVariableNode) ChildNodes() []Node {
	return []Node{n.Variable}
}

func (n *PinnedVariableNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *PinnedVariableNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Variable: ")
	builder.WriteString(n.Variable.String(indent + "  "))
	return builder.String()
}

var _ Node = (*PostExecutionNode)(nil)

type PostExecutionNode struct {
	BaseNode
	Statements *StatementsNode
}

func NewPostExecutionNode(startOffset int, length int, statements *StatementsNode) *PostExecutionNode {
	return &PostExecutionNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Statements: statements,
	}
}

func (n *PostExecutionNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
}

func (n *PostExecutionNode) ChildNodes() []Node {
	return []Node{n.Statements}
}

func (n *PostExecutionNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *PostExecutionNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*PreExecutionNode)(nil)

type PreExecutionNode struct {
	BaseNode
	Statements *StatementsNode
}

func NewPreExecutionNode(startOffset int, length int, statements *StatementsNode) *PreExecutionNode {
	return &PreExecutionNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Statements: statements,
	}
}

func (n *PreExecutionNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
}

func (n *PreExecutionNode) ChildNodes() []Node {
	return []Node{n.Statements}
}

func (n *PreExecutionNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *PreExecutionNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*ProgramNode)(nil)

type ProgramNode struct {
	BaseNode
	Locals     []string
	Statements *StatementsNode
}

func NewProgramNode(startOffset int, length int, locals []string, statements *StatementsNode) *ProgramNode {
	return &ProgramNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Locals:     locals,
		Statements: statements,
	}
}

func (n *ProgramNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Statements.Accept(visitor)
}

func (n *ProgramNode) ChildNodes() []Node {
	return []Node{n.Statements}
}

func (n *ProgramNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ProgramNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Locals: ")
	builder.WriteString("\n")
	for _, constant := range n.Locals {
		builder.WriteString(nextNextIndent)
		builder.WriteString("\"")
		builder.WriteString(constant)
		builder.WriteString("\"")
		builder.WriteString("\n")
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	builder.WriteString(n.Statements.String(indent + "  "))
	return builder.String()
}

var _ Node = (*RangeNode)(nil)

type RangeNode struct {
	BaseNode
	Flags int16
	Left  Node
	Right Node
}

func NewRangeNode(startOffset int, length int, flags int16, left Node, right Node) *RangeNode {
	return &RangeNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Left:     left,
		Right:    right,
	}
}

func (n *RangeNode) IsExcludeEnd() bool {
	return isRangeFlagsExcludeEnd(n.Flags)
}

func (n *RangeNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Left != nil {
		n.Left.Accept(visitor)
	}
	if n.Right != nil {
		n.Right.Accept(visitor)
	}
}

func (n *RangeNode) ChildNodes() []Node {
	return []Node{n.Left, n.Right}
}

func (n *RangeNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *RangeNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("RangeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Left: ")
	if n.Left == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Left.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Right: ")
	if n.Right == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Right.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*RationalNode)(nil)

type RationalNode struct {
	BaseNode
	Flags       int16
	Numerator   *big.Int
	Denominator *big.Int
}

func NewRationalNode(startOffset int, length int, flags int16, numerator *big.Int, denominator *big.Int) *RationalNode {
	return &RationalNode{
		BaseNode:    NewBaseNode(startOffset, length),
		Flags:       flags,
		Numerator:   numerator,
		Denominator: denominator,
	}
}

func (n *RationalNode) IsBinary() bool {
	return isIntegerBaseFlagsBinary(n.Flags)
}

func (n *RationalNode) IsDecimal() bool {
	return isIntegerBaseFlagsDecimal(n.Flags)
}

func (n *RationalNode) IsOctal() bool {
	return isIntegerBaseFlagsOctal(n.Flags)
}

func (n *RationalNode) IsHexadecimal() bool {
	return isIntegerBaseFlagsHexadecimal(n.Flags)
}

func (n *RationalNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *RationalNode) ChildNodes() []Node {
	return []Node{}
}

func (n *RationalNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *RationalNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("IntegerBaseFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Numerator: ")
	builder.WriteString(fmt.Sprint(n.Numerator))
	builder.WriteString(indent + "  ")
	builder.WriteString("Denominator: ")
	builder.WriteString(fmt.Sprint(n.Denominator))
	return builder.String()
}

var _ Node = (*RedoNode)(nil)

type RedoNode struct {
	BaseNode
}

func NewRedoNode(startOffset int, length int) *RedoNode {
	return &RedoNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *RedoNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *RedoNode) ChildNodes() []Node {
	return []Node{}
}

func (n *RedoNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *RedoNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*RegularExpressionNode)(nil)

type RegularExpressionNode struct {
	BaseNode
	Flags     int16
	Unescaped string
}

func NewRegularExpressionNode(startOffset int, length int, flags int16, unescaped string) *RegularExpressionNode {
	return &RegularExpressionNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Unescaped: unescaped,
	}
}

func (n *RegularExpressionNode) IsIgnoreCase() bool {
	return isRegularExpressionFlagsIgnoreCase(n.Flags)
}

func (n *RegularExpressionNode) IsExtended() bool {
	return isRegularExpressionFlagsExtended(n.Flags)
}

func (n *RegularExpressionNode) IsMultiLine() bool {
	return isRegularExpressionFlagsMultiLine(n.Flags)
}

func (n *RegularExpressionNode) IsOnce() bool {
	return isRegularExpressionFlagsOnce(n.Flags)
}

func (n *RegularExpressionNode) IsEucJp() bool {
	return isRegularExpressionFlagsEucJp(n.Flags)
}

func (n *RegularExpressionNode) IsAscii8bit() bool {
	return isRegularExpressionFlagsAscii8bit(n.Flags)
}

func (n *RegularExpressionNode) IsWindows31j() bool {
	return isRegularExpressionFlagsWindows31j(n.Flags)
}

func (n *RegularExpressionNode) IsUtf8() bool {
	return isRegularExpressionFlagsUtf8(n.Flags)
}

func (n *RegularExpressionNode) IsForcedUtf8Encoding() bool {
	return isRegularExpressionFlagsForcedUtf8Encoding(n.Flags)
}

func (n *RegularExpressionNode) IsForcedBinaryEncoding() bool {
	return isRegularExpressionFlagsForcedBinaryEncoding(n.Flags)
}

func (n *RegularExpressionNode) IsForcedUsAsciiEncoding() bool {
	return isRegularExpressionFlagsForcedUsAsciiEncoding(n.Flags)
}

func (n *RegularExpressionNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *RegularExpressionNode) ChildNodes() []Node {
	return []Node{}
}

func (n *RegularExpressionNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *RegularExpressionNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("RegularExpressionFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Unescaped: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Unescaped))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*RequiredKeywordParameterNode)(nil)

type RequiredKeywordParameterNode struct {
	BaseNode
	Flags int16
	Name  string
}

func NewRequiredKeywordParameterNode(startOffset int, length int, flags int16, name string) *RequiredKeywordParameterNode {
	return &RequiredKeywordParameterNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Name:     name,
	}
}

func (n *RequiredKeywordParameterNode) IsRepeatedParameter() bool {
	return isParameterFlagsRepeatedParameter(n.Flags)
}

func (n *RequiredKeywordParameterNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *RequiredKeywordParameterNode) ChildNodes() []Node {
	return []Node{}
}

func (n *RequiredKeywordParameterNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *RequiredKeywordParameterNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("ParameterFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*RequiredParameterNode)(nil)

type RequiredParameterNode struct {
	BaseNode
	Flags int16
	Name  string
}

func NewRequiredParameterNode(startOffset int, length int, flags int16, name string) *RequiredParameterNode {
	return &RequiredParameterNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Name:     name,
	}
}

func (n *RequiredParameterNode) IsRepeatedParameter() bool {
	return isParameterFlagsRepeatedParameter(n.Flags)
}

func (n *RequiredParameterNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *RequiredParameterNode) ChildNodes() []Node {
	return []Node{}
}

func (n *RequiredParameterNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *RequiredParameterNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("ParameterFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Name))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*RescueModifierNode)(nil)

type RescueModifierNode struct {
	BaseNode
	Expression       Node
	RescueExpression Node
}

func NewRescueModifierNode(startOffset int, length int, expression Node, rescueExpression Node) *RescueModifierNode {
	return &RescueModifierNode{
		BaseNode:         NewBaseNode(startOffset, length),
		Expression:       expression,
		RescueExpression: rescueExpression,
	}
}

func (n *RescueModifierNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	n.Expression.SetNewLineFlag(source, newlineMarked)
}

func (n *RescueModifierNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Expression.Accept(visitor)
	n.RescueExpression.Accept(visitor)
}

func (n *RescueModifierNode) ChildNodes() []Node {
	return []Node{n.Expression, n.RescueExpression}
}

func (n *RescueModifierNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *RescueModifierNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Expression: ")
	builder.WriteString(n.Expression.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("RescueExpression: ")
	builder.WriteString(n.RescueExpression.String(indent + "  "))
	return builder.String()
}

var _ Node = (*RescueNode)(nil)

type RescueNode struct {
	BaseNode
	Exceptions []Node
	Reference  Node
	Statements *StatementsNode
	Subsequent *RescueNode
}

func NewRescueNode(startOffset int, length int, exceptions []Node, reference Node, statements *StatementsNode, subsequent *RescueNode) *RescueNode {
	return &RescueNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Exceptions: exceptions,
		Reference:  reference,
		Statements: statements,
		Subsequent: subsequent,
	}
}

func (n *RescueNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Exceptions {
		child.Accept(visitor)
	}
	if n.Reference != nil {
		n.Reference.Accept(visitor)
	}
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
	if n.Subsequent != nil {
		n.Subsequent.Accept(visitor)
	}
}

func (n *RescueNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Exceptions {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.Reference)
	childNodes = append(childNodes, n.Statements)
	childNodes = append(childNodes, n.Subsequent)
	return childNodes
}

func (n *RescueNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *RescueNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Exceptions: ")
	builder.WriteString("\n")
	for _, child := range n.Exceptions {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Reference: ")
	if n.Reference == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Reference.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Subsequent: ")
	if n.Subsequent == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Subsequent.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*RestParameterNode)(nil)

type RestParameterNode struct {
	BaseNode
	Flags int16
	Name  *string
}

func NewRestParameterNode(startOffset int, length int, flags int16, name *string) *RestParameterNode {
	return &RestParameterNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Name:     name,
	}
}

func (n *RestParameterNode) IsRepeatedParameter() bool {
	return isParameterFlagsRepeatedParameter(n.Flags)
}

func (n *RestParameterNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *RestParameterNode) ChildNodes() []Node {
	return []Node{}
}

func (n *RestParameterNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *RestParameterNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("ParameterFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Name: ")
	if n.Name == nil {
		builder.WriteString("nil")
	} else {
		builder.WriteString("\"")
		builder.WriteString(fmt.Sprint(n.Name))
		builder.WriteString("\"")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*RetryNode)(nil)

type RetryNode struct {
	BaseNode
}

func NewRetryNode(startOffset int, length int) *RetryNode {
	return &RetryNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *RetryNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *RetryNode) ChildNodes() []Node {
	return []Node{}
}

func (n *RetryNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *RetryNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ReturnNode)(nil)

type ReturnNode struct {
	BaseNode
	Arguments *ArgumentsNode
}

func NewReturnNode(startOffset int, length int, arguments *ArgumentsNode) *ReturnNode {
	return &ReturnNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Arguments: arguments,
	}
}

func (n *ReturnNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Arguments != nil {
		n.Arguments.Accept(visitor)
	}
}

func (n *ReturnNode) ChildNodes() []Node {
	return []Node{n.Arguments}
}

func (n *ReturnNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ReturnNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	if n.Arguments == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Arguments.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*SelfNode)(nil)

type SelfNode struct {
	BaseNode
}

func NewSelfNode(startOffset int, length int) *SelfNode {
	return &SelfNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *SelfNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *SelfNode) ChildNodes() []Node {
	return []Node{}
}

func (n *SelfNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *SelfNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*ShareableConstantNode)(nil)

type ShareableConstantNode struct {
	BaseNode
	Flags int16
	Write Node
}

func NewShareableConstantNode(startOffset int, length int, flags int16, write Node) *ShareableConstantNode {
	return &ShareableConstantNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Write:    write,
	}
}

func (n *ShareableConstantNode) IsLiteral() bool {
	return isShareableConstantNodeFlagsLiteral(n.Flags)
}

func (n *ShareableConstantNode) IsExperimentalEverything() bool {
	return isShareableConstantNodeFlagsExperimentalEverything(n.Flags)
}

func (n *ShareableConstantNode) IsExperimentalCopy() bool {
	return isShareableConstantNodeFlagsExperimentalCopy(n.Flags)
}

func (n *ShareableConstantNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Write.Accept(visitor)
}

func (n *ShareableConstantNode) ChildNodes() []Node {
	return []Node{n.Write}
}

func (n *ShareableConstantNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *ShareableConstantNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("ShareableConstantNodeFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Write: ")
	builder.WriteString(n.Write.String(indent + "  "))
	return builder.String()
}

var _ Node = (*SingletonClassNode)(nil)

type SingletonClassNode struct {
	BaseNode
	Locals     []string
	Expression Node
	Body       Node
}

func NewSingletonClassNode(startOffset int, length int, locals []string, expression Node, body Node) *SingletonClassNode {
	return &SingletonClassNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Locals:     locals,
		Expression: expression,
		Body:       body,
	}
}

func (n *SingletonClassNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Expression.Accept(visitor)
	if n.Body != nil {
		n.Body.Accept(visitor)
	}
}

func (n *SingletonClassNode) ChildNodes() []Node {
	return []Node{n.Expression, n.Body}
}

func (n *SingletonClassNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *SingletonClassNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Locals: ")
	builder.WriteString("\n")
	for _, constant := range n.Locals {
		builder.WriteString(nextNextIndent)
		builder.WriteString("\"")
		builder.WriteString(constant)
		builder.WriteString("\"")
		builder.WriteString("\n")
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Expression: ")
	builder.WriteString(n.Expression.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Body: ")
	if n.Body == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Body.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*SourceEncodingNode)(nil)

type SourceEncodingNode struct {
	BaseNode
}

func NewSourceEncodingNode(startOffset int, length int) *SourceEncodingNode {
	return &SourceEncodingNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *SourceEncodingNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *SourceEncodingNode) ChildNodes() []Node {
	return []Node{}
}

func (n *SourceEncodingNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *SourceEncodingNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*SourceFileNode)(nil)

type SourceFileNode struct {
	BaseNode
	Flags    int16
	Filepath string
}

func NewSourceFileNode(startOffset int, length int, flags int16, filepath string) *SourceFileNode {
	return &SourceFileNode{
		BaseNode: NewBaseNode(startOffset, length),
		Flags:    flags,
		Filepath: filepath,
	}
}

func (n *SourceFileNode) IsForcedUtf8Encoding() bool {
	return isStringFlagsForcedUtf8Encoding(n.Flags)
}

func (n *SourceFileNode) IsForcedBinaryEncoding() bool {
	return isStringFlagsForcedBinaryEncoding(n.Flags)
}

func (n *SourceFileNode) IsFrozen() bool {
	return isStringFlagsFrozen(n.Flags)
}

func (n *SourceFileNode) IsMutable() bool {
	return isStringFlagsMutable(n.Flags)
}

func (n *SourceFileNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *SourceFileNode) ChildNodes() []Node {
	return []Node{}
}

func (n *SourceFileNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *SourceFileNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("StringFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Filepath: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Filepath))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*SourceLineNode)(nil)

type SourceLineNode struct {
	BaseNode
}

func NewSourceLineNode(startOffset int, length int) *SourceLineNode {
	return &SourceLineNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *SourceLineNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *SourceLineNode) ChildNodes() []Node {
	return []Node{}
}

func (n *SourceLineNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *SourceLineNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*SplatNode)(nil)

type SplatNode struct {
	BaseNode
	Expression Node
}

func NewSplatNode(startOffset int, length int, expression Node) *SplatNode {
	return &SplatNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Expression: expression,
	}
}

func (n *SplatNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Expression != nil {
		n.Expression.Accept(visitor)
	}
}

func (n *SplatNode) ChildNodes() []Node {
	return []Node{n.Expression}
}

func (n *SplatNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *SplatNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Expression: ")
	if n.Expression == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Expression.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*StatementsNode)(nil)

type StatementsNode struct {
	BaseNode
	Body []Node
}

func NewStatementsNode(startOffset int, length int, body []Node) *StatementsNode {
	return &StatementsNode{
		BaseNode: NewBaseNode(startOffset, length),
		Body:     body,
	}
}

func (n *StatementsNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Body {
		child.Accept(visitor)
	}
}

func (n *StatementsNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Body {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *StatementsNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *StatementsNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Body: ")
	builder.WriteString("\n")
	for _, child := range n.Body {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*StringNode)(nil)

type StringNode struct {
	BaseNode
	Flags     int16
	Unescaped string
}

func NewStringNode(startOffset int, length int, flags int16, unescaped string) *StringNode {
	return &StringNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Unescaped: unescaped,
	}
}

func (n *StringNode) IsForcedUtf8Encoding() bool {
	return isStringFlagsForcedUtf8Encoding(n.Flags)
}

func (n *StringNode) IsForcedBinaryEncoding() bool {
	return isStringFlagsForcedBinaryEncoding(n.Flags)
}

func (n *StringNode) IsFrozen() bool {
	return isStringFlagsFrozen(n.Flags)
}

func (n *StringNode) IsMutable() bool {
	return isStringFlagsMutable(n.Flags)
}

func (n *StringNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *StringNode) ChildNodes() []Node {
	return []Node{}
}

func (n *StringNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *StringNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("StringFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Unescaped: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Unescaped))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*SuperNode)(nil)

type SuperNode struct {
	BaseNode
	Arguments *ArgumentsNode
	Block     Node
}

func NewSuperNode(startOffset int, length int, arguments *ArgumentsNode, block Node) *SuperNode {
	return &SuperNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Arguments: arguments,
		Block:     block,
	}
}

func (n *SuperNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Arguments != nil {
		n.Arguments.Accept(visitor)
	}
	if n.Block != nil {
		n.Block.Accept(visitor)
	}
}

func (n *SuperNode) ChildNodes() []Node {
	return []Node{n.Arguments, n.Block}
}

func (n *SuperNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *SuperNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	if n.Arguments == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Arguments.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Block: ")
	if n.Block == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Block.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*SymbolNode)(nil)

type SymbolNode struct {
	BaseNode
	Flags     int16
	Unescaped string
}

func NewSymbolNode(startOffset int, length int, flags int16, unescaped string) *SymbolNode {
	return &SymbolNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Unescaped: unescaped,
	}
}

func (n *SymbolNode) IsForcedUtf8Encoding() bool {
	return isSymbolFlagsForcedUtf8Encoding(n.Flags)
}

func (n *SymbolNode) IsForcedBinaryEncoding() bool {
	return isSymbolFlagsForcedBinaryEncoding(n.Flags)
}

func (n *SymbolNode) IsForcedUsAsciiEncoding() bool {
	return isSymbolFlagsForcedUsAsciiEncoding(n.Flags)
}

func (n *SymbolNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *SymbolNode) ChildNodes() []Node {
	return []Node{}
}

func (n *SymbolNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *SymbolNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("SymbolFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Unescaped: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Unescaped))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*TrueNode)(nil)

type TrueNode struct {
	BaseNode
}

func NewTrueNode(startOffset int, length int) *TrueNode {
	return &TrueNode{
		BaseNode: NewBaseNode(startOffset, length),
	}
}

func (n *TrueNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *TrueNode) ChildNodes() []Node {
	return []Node{}
}

func (n *TrueNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *TrueNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*UndefNode)(nil)

type UndefNode struct {
	BaseNode
	Names []Node
}

func NewUndefNode(startOffset int, length int, names []Node) *UndefNode {
	return &UndefNode{
		BaseNode: NewBaseNode(startOffset, length),
		Names:    names,
	}
}

func (n *UndefNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Names {
		child.Accept(visitor)
	}
}

func (n *UndefNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Names {
		childNodes = append(childNodes, child)
	}
	return childNodes
}

func (n *UndefNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *UndefNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Names: ")
	builder.WriteString("\n")
	for _, child := range n.Names {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	return builder.String()
}

var _ Node = (*UnlessNode)(nil)

type UnlessNode struct {
	BaseNode
	Predicate  Node
	Statements *StatementsNode
	ElseClause *ElseNode
}

func NewUnlessNode(startOffset int, length int, predicate Node, statements *StatementsNode, elseClause *ElseNode) *UnlessNode {
	return &UnlessNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Predicate:  predicate,
		Statements: statements,
		ElseClause: elseClause,
	}
}

func (n *UnlessNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	n.Predicate.SetNewLineFlag(source, newlineMarked)
}

func (n *UnlessNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Predicate.Accept(visitor)
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
	if n.ElseClause != nil {
		n.ElseClause.Accept(visitor)
	}
}

func (n *UnlessNode) ChildNodes() []Node {
	return []Node{n.Predicate, n.Statements, n.ElseClause}
}

func (n *UnlessNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *UnlessNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Predicate: ")
	builder.WriteString(n.Predicate.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("ElseClause: ")
	if n.ElseClause == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.ElseClause.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*UntilNode)(nil)

type UntilNode struct {
	BaseNode
	Flags      int16
	Predicate  Node
	Statements *StatementsNode
}

func NewUntilNode(startOffset int, length int, flags int16, predicate Node, statements *StatementsNode) *UntilNode {
	return &UntilNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Flags:      flags,
		Predicate:  predicate,
		Statements: statements,
	}
}

func (n *UntilNode) IsBeginModifier() bool {
	return isLoopFlagsBeginModifier(n.Flags)
}

func (n *UntilNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	n.Predicate.SetNewLineFlag(source, newlineMarked)
}

func (n *UntilNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Predicate.Accept(visitor)
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
}

func (n *UntilNode) ChildNodes() []Node {
	return []Node{n.Predicate, n.Statements}
}

func (n *UntilNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *UntilNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("LoopFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Predicate: ")
	builder.WriteString(n.Predicate.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*WhenNode)(nil)

type WhenNode struct {
	BaseNode
	Conditions []Node
	Statements *StatementsNode
}

func NewWhenNode(startOffset int, length int, conditions []Node, statements *StatementsNode) *WhenNode {
	return &WhenNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Conditions: conditions,
		Statements: statements,
	}
}

func (n *WhenNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	for _, child := range n.Conditions {
		child.Accept(visitor)
	}
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
}

func (n *WhenNode) ChildNodes() []Node {
	childNodes := make([]Node, 0)
	for _, child := range n.Conditions {
		childNodes = append(childNodes, child)
	}
	childNodes = append(childNodes, n.Statements)
	return childNodes
}

func (n *WhenNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *WhenNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	nextNextIndent := indent + "  " + "  "
	builder.WriteString(indent + "  ")
	builder.WriteString("Conditions: ")
	builder.WriteString("\n")
	for _, child := range n.Conditions {
		builder.WriteString(nextNextIndent)
		builder.WriteString(child.String(nextNextIndent))
	}
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*WhileNode)(nil)

type WhileNode struct {
	BaseNode
	Flags      int16
	Predicate  Node
	Statements *StatementsNode
}

func NewWhileNode(startOffset int, length int, flags int16, predicate Node, statements *StatementsNode) *WhileNode {
	return &WhileNode{
		BaseNode:   NewBaseNode(startOffset, length),
		Flags:      flags,
		Predicate:  predicate,
		Statements: statements,
	}
}

func (n *WhileNode) IsBeginModifier() bool {
	return isLoopFlagsBeginModifier(n.Flags)
}

func (n *WhileNode) SetNewLineFlag(source *Source, newlineMarked []bool) {
	n.Predicate.SetNewLineFlag(source, newlineMarked)
}

func (n *WhileNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	n.Predicate.Accept(visitor)
	if n.Statements != nil {
		n.Statements.Accept(visitor)
	}
}

func (n *WhileNode) ChildNodes() []Node {
	return []Node{n.Predicate, n.Statements}
}

func (n *WhileNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *WhileNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("LoopFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Predicate: ")
	builder.WriteString(n.Predicate.String(indent + "  "))
	builder.WriteString(indent + "  ")
	builder.WriteString("Statements: ")
	if n.Statements == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Statements.String(indent + "  "))
	}
	return builder.String()
}

var _ Node = (*XStringNode)(nil)

type XStringNode struct {
	BaseNode
	Flags     int16
	Unescaped string
}

func NewXStringNode(startOffset int, length int, flags int16, unescaped string) *XStringNode {
	return &XStringNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Flags:     flags,
		Unescaped: unescaped,
	}
}

func (n *XStringNode) IsForcedUtf8Encoding() bool {
	return isEncodingFlagsForcedUtf8Encoding(n.Flags)
}

func (n *XStringNode) IsForcedBinaryEncoding() bool {
	return isEncodingFlagsForcedBinaryEncoding(n.Flags)
}

func (n *XStringNode) VisitChildNodes(visitor AbstractNodeVisitor) {
}

func (n *XStringNode) ChildNodes() []Node {
	return []Node{}
}

func (n *XStringNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *XStringNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("EncodingFlags: ")
	builder.WriteString(fmt.Sprintf("%x", n.Flags))
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Unescaped: ")
	builder.WriteString("\"")
	builder.WriteString(fmt.Sprint(n.Unescaped))
	builder.WriteString("\"")
	builder.WriteString("\n")
	return builder.String()
}

var _ Node = (*YieldNode)(nil)

type YieldNode struct {
	BaseNode
	Arguments *ArgumentsNode
}

func NewYieldNode(startOffset int, length int, arguments *ArgumentsNode) *YieldNode {
	return &YieldNode{
		BaseNode:  NewBaseNode(startOffset, length),
		Arguments: arguments,
	}
}

func (n *YieldNode) VisitChildNodes(visitor AbstractNodeVisitor) {
	if n.Arguments != nil {
		n.Arguments.Accept(visitor)
	}
}

func (n *YieldNode) ChildNodes() []Node {
	return []Node{n.Arguments}
}

func (n *YieldNode) Accept(visitor AbstractNodeVisitor) {
	visitor.DefaultVisit(n)
}

func (n *YieldNode) String(indent string) string {
	var builder strings.Builder
	builder.WriteString(reflect.TypeOf(*n).Name())
	if n.HasNewLineFlag() {
		builder.WriteString("[Li]")
	}
	builder.WriteString("\n")
	builder.WriteString(indent + "  ")
	builder.WriteString("Arguments: ")
	if n.Arguments == nil {
		builder.WriteString("nil\n")
	} else {
		builder.WriteString(n.Arguments.String(indent + "  "))
	}
	return builder.String()
}
