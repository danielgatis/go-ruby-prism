<%- require_relative './utils.rb' -%>

package parser

import (
	"fmt"

  "github.com/rotisserie/eris"
)

func loadNode(buff *buffer, src []byte, pool *constantPool) (Node, error) {
  nodeType, err := buff.readByte()
  if err != nil {
    return nil, eris.Wrap(err, "error reading node type")
  }

  nodeLoc, err := loadLocation(buff)
  if err != nil {
    return nil, eris.Wrap(err, "error reading node location")
  }

  switch(nodeType) {
    <%- nodes.each.with_index(1) do |node, index| -%>
    case <%= index %>:
      <%- if node.needs_serialized_length? -%>
      buff.readUInt32()

      <%- end -%>
      <%- node.fields.each do |field| -%>
      <%- case(field) -%>
      <%- when Prism::Template::NodeField -%>
      <%= arg(field) %>_, err := loadNode(buff, src, pool)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }

      <%- if field.ruby_type == "Node" -%>
      <%= arg(field) %> := <%= arg(field) %>_
      <%- else -%>
      <%= arg(field) %>, ok := <%= arg(field) %>_.(*<%= field.ruby_type %>)
      if !ok && <%= arg(field) %>_ != nil {
        return nil, eris.Wrapf(err, "error reading param <%= arg(field) %>: expected <%= field.ruby_type %>, got %T", <%= arg(field) %>_)
      }
      <%- end -%>

      <%- when Prism::Template::OptionalNodeField -%>
      <%= arg(field) %>_, err := loadOptionalNode(buff, src, pool)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }

      <%- if field.ruby_type == "Node" -%>
      <%= arg(field) %> := <%= arg(field) %>_
      <%- else -%>
      <%= arg(field) %>, ok := <%= arg(field) %>_.(*<%= field.ruby_type %>)
      if !ok && <%= arg(field) %>_ != nil {
        return nil, eris.Wrap(err, fmt.Sprintf("error reading param <%= arg(field) %>: expected <%= field.ruby_type %>, got %T", <%= arg(field) %>_))
      }
      <%- end -%>

      <%- when Prism::Template::StringField -%>
      <%= arg(field) %>_, err := loadStr(buff, src)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }
      <%= arg(field) %> := string(<%= arg(field) %>_)

      <%- when Prism::Template::NodeListField -%>
      <%= arg(field) %>Count, err := loadVarUInt(buff)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>Count")
      }

      <%= arg(field) %> := make([]Node, <%= arg(field) %>Count)
      for i := range <%= arg(field) %>Count {
        <%= field.name %>[i], err = loadNode(buff, src, pool)
        if err != nil {
          return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
        }
      }

      <%- when Prism::Template::ConstantField -%>
      <%= arg(field) %>, err := loadConstant(buff, pool)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }

      <%- when Prism::Template::OptionalConstantField -%>
      <%= arg(field) %>, err := loadOptionalConstant(buff, pool)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }

      <%- when Prism::Template::ConstantListField -%>
      <%= arg(field) %>, err := loadConstants(buff, pool)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }

      <%- when Prism::Template::LocationField -%>
      <%= arg(field) %>, err := loadLocation(buff)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }

      <%- when Prism::Template::OptionalLocationField -%>
      <%= arg(field) %>, err := loadOptionalLocation(buff)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }

      <%- when Prism::Template::UInt8Field -%>
      <%= arg(field) %>, err := buff.readByte()
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }

      <%- when Prism::Template::UInt32Field -%>
      <%= arg(field) %>, err := loadVarUInt(buff)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }

      <%- when Prism::Template::FlagsField -%>
      <%= arg(field) %>_, err := loadFlags(buff)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }
      <%= arg(field) %> := <%= field.options[:kind] %>(<%= arg(field) %>_)

      <%- when Prism::Template::IntegerField -%>
      <%= arg(field) %>, err := loadInteger(buff)
      if err != nil {
        return nil, eris.Wrap(err, "error reading param <%= arg(field) %>")
      }

      <%- when Prism::Template::DoubleField -%>
      <%= arg(field) %> := buff.readFloat64()

      <%- end -%>
      <%- end -%>
      return New<%= node.name %>(<%= (node.fields.map {arg(_1)} + ['nodeLoc']).join(', ') %>), nil
    <%- end -%>
    default:
      return nil, eris.Errorf("unknown node type: %d", nodeType)
  }
}
